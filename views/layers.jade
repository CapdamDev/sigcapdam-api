doctype html
html
    head
        title SIGCAPDAM - Capas
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/ol@v8.1.0/ol.css')
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css")
        include ./includes/head.jade
        
        body(class='bg-white dark:bg-gray-900 w-auto h-auto')
            aside.sidebar#mySidebar(class='fixed top-0 z-10 ml-[-100%] flex h-screen w-full flex-col justify-between border-r bg-white px-5 pb-3 transition duration-300 md:w-4/12 lg:ml-0 lg:w-[25%] xl:w-[20%] 2xl:w-[15%] dark:bg-gray-800 dark:border-gray-700')
                div
                    div(class='mx-6 px-6 py-4')
                        a(href='/')
                            img(src='./assets/img/sigcapdam_clean.png' alt='Logo' class='w-100 mx-auto')
                            //- h1.text-2xl.text-center.text-white(class='dark:text-gray-900.font-bold') SIGCAPDAM
                    div(class='mt-8 text-center')
                        img(src="./assets/img/profile.png" alt="" class="m-auto h-10 w-10 rounded-full object-cover lg:h-28 lg:w-28")
                        h5(class="mt-4 hidden text-xl font-semibold text-gray-600 lg:block dark:text-gray-300") Demo
                        span#userType(class='hidden text-gray-400 lg:block') User type
                    
                    ul(class='mt-8 space-y-2 tracking-wide')
                        li
                            a(href='/' class='group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300')
                                svg(class="-ml-1 h-6 w-6" viewBox="0 0 24 24" fill="none")
                                    path(d="M6 8a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V8ZM6 15a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2v-1Z" class="dark:fill-slate-600 fill-current text-cyan-400")
                                    path(d="M13 8a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2V8Z" class="fill-current text-cyan-200 group-hover:text-cyan-300")
                                    path(d="M13 15a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-1Z" class="fill-current group-hover:text-sky-300")
                                span(class="-mr-1 font-medium") Layers
                        li
                            a#jstree(class='group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300')
                                svg(class="-ml-1 h-6 w-6" viewBox="0 0 24 24" fill="none")
                                span(class="group-hover:text-gray-700 dark:group-hover:text-gray-50")
                                    path(d="M6 8a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V8ZM6 15a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2v-1Z" class="dark:fill-slate-600 fill-current text-cyan-400")
                                    path(d="M13 8a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2V8Z" class="fill-current text-cyan-200 group-hover:text-cyan-300")
                                    path(d="M13 15a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-1Z" class="fill-current group-hover:text-sky-300")
                                
                        li
                            a(href="#" class="group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300")
                                svg(xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor")
                                    path(class="fill-current text-gray-300 group-hover:text-cyan-300" fill-rule="evenodd" d="M2 6a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1H8a3 3 0 00-3 3v1.5a1.5 1.5 0 01-3 0V6z" clip-rule="evenodd")
                                    path(class="fill-current text-gray-600 group-hover:text-cyan-600 dark:group-hover:text-sky-400" d="M6 12a2 2 0 012-2h8a2 2 0 012 2v2a2 2 0 01-2 2H2h2a2 2 0 002-2v-2z")
                                span(class="group-hover:text-gray-700 dark:group-hover:text-gray-50") Categories
                        li
                            a(href='#' class='group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300')
                                svg(xmlns='http://www.w3.org/2000/svg' class='h-5 2-5' viewBox='0 0 20 20' fill='currentColor')
                                    path(class="fill-current text-gray-300 group-hover:text-cyan-300" fill-rule="evenodd" d="M2 6a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1H8a3 3 0 00-3 3v1.5a1.5 1.5 0 01-3 0V6z" clip-rule="evenodd")
                                    path(class='fill-current text-gray-600 group-hover:text-cyan-600 dark:group-hover:text-sky-400')
                                span(class='group-hover:text-gray-700 dark:group-hover:text-gray-50') Reportes
                        li
                            a(href="#" class="group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300")
                                svg(xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor")
                                    path(class="fill-current text-gray-600 group-hover:text-cyan-600 dark:group-hover:text-sky-400" fill-rule="evenodd" d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z" clip-rule="evenodd")
                                    path(class="fill-current text-gray-300 group-hover:text-cyan-300" d="M15 7h1a2 2 0 012 2v5.5a1.5 1.5 0 01-3 0V7z")
                                span(class="group-hover:text-gray-700 dark:group-hover:text-gray-50") Reports
                        li
                            a(href="#" class="group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300")
                                svg(xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor")
                                    path(class="fill-current text-gray-600 group-hover:text-cyan-600 dark:group-hover:text-cyan-400" d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z")
                                    path(class="fill-current text-gray-300 group-hover:text-cyan-300" d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z")
                                span(class="group-hover:text-gray-700 dark:group-hover:text-gray-50") Other data
                        li
                            a(href="#" class="group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300")
                                svg(xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor")
                                    path(class="fill-current text-gray-300 group-hover:text-cyan-300" d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z")
                                    path(class="fill-current text-gray-600 group-hover:text-cyan-600 dark:group-hover:text-sky-400" fill-rule="evenodd" d="M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z" clip-rule="evenodd")
                                span(class="group-hover:text-gray-700 dark:group-hover:text-white") Finance
                .mx-6.flex.items-center.justify-between.border-t.px-6.pt-4(class='dark:border-gray-700')
                    button#logoutButton(class="group flex items-center space-x-4 rounded-md px-4 py-3 text-gray-600 dark:text-gray-300")
                        svg(xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor")
                            path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1")
                        span(class="group-hover:text-gray-700 dark:group-hover:text-white") Logout
            div(class="ml-auto lg:w-[75%] xl:w-[80%] 2xl:w-[85%]")
                div(class="sticky top-0 h-16 border-b bg-white dark:bg-gray-800 dark:border-gray-700 lg:py-2.5")
                    div(class="flex items-center justify-between space-x-4 px-6 2xl:container")
                        h5(hidden class="text-2xl font-medium text-gray-600 lg:block dark:text-white") SIGCAPDAM
                        button#toggleSidebar(class="-mr-2 h-16 w-12 border-r lg:hidden dark:border-gray-700 dark:text-gray-300")
                            svg(xmlns="http://www.w3.org/2000/svg" class="my-auto h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor")
                                path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16")
                        div(class='flex space-x-4')
                            div(hidden class="md:block")
                                div(class="relative flex items-center text-gray-400 focus-within:text-cyan-400")
                                    span(class="absolute left-4 flex h-6 items-center border-r border-gray-300 pr-3 dark:border-gray-700")
                                        svg(xmlns="http://ww50w3.org/2000/svg" class="w-4 fill-current" viewBox="0 0 35.997 36.004")
                                            path(id="Icon_awesome-search" data-name="search" d="M35.508,31.127l-7.01-7.01a1.686,1.686,0,0,0-1.2-.492H26.156a14.618,14.618,0,1,0-2.531,2.531V27.3a1.686,1.686,0,0,0,.492,1.2l7.01,7.01a1.681,1.681,0,0,0,2.384,0l1.99-1.99a1.7,1.7,0,0,0,.007-2.391Zm-20.883-7.5a9,9,0,1,1,9-9A8.995,8.995,0,0,1,14.625,23.625Z")
                                    input(type="search" name="leadingIcon" id="leadingIcon" placeholder="Search here" class="outline-none w-full rounded-xl border border-gray-300 py-2.5 pl-14 pr-4 text-sm text-gray-600 transition focus:border-cyan-300 dark:bg-gray-900 dark:border-gray-700")
                            button(aria-label="search" class="h-10 w-10 rounded-xl border bg-gray-100 active:bg-gray-200 md:hidden dark:bg-gray-700 dark:border-gray-600 dark:active:bg-gray-800")
                                svg(xmlns="http://ww50w3.org/2000/svg" class="mx-auto w-4 fill-current text-gray-600 dark:text-gray-300" viewBox="0 0 35.997 36.004")
                                    path(id="Icon_awesome-search" data-name="search" d="M35.508,31.127l-7.01-7.01a1.686,1.686,0,0,0-1.2-.492H26.156a14.618,14.618,0,1,0-2.531,2.531V27.3a1.686,1.686,0,0,0,.492,1.2l7.01,7.01a1.681,1.681,0,0,0,2.384,0l1.99-1.99a1.7,1.7,0,0,0,.007-2.391Zm-20.883-7.5a9,9,0,1,1,9-9A8.995,8.995,0,0,1,14.625,23.625Z")
                            button(aria-label="chat" class="h-10 w-10 rounded-xl border bg-gray-100 active:bg-gray-200 dark:bg-gray-700 dark:border-gray-600 dark:active:bg-gray-800")
                                svg(xmlns="http://www.w3.org/2000/svg" class="m-auto h-5 w-5 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor")
                                    path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z")
                            button(aria-label="notification" class="h-10 w-10 rounded-xl border bg-gray-100 active:bg-gray-200 dark:bg-gray-700 dark:border-gray-600 dark:active:bg-gray-800")
                                svg(xmlns="http://www.w3.org/2000/svg" class="m-auto h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor")
                                    path(d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z")
                            
                div
                    #map(class="flex h-[93vh] items-center justify-center rounded-xl")

                //- #loadingSpinner(class='fixed top-0 left-0 w-screen h-screen flex justify-center items-center bg-white bg-opacity-100 z-50')
                //-     div(class="animate-spin rounded-full border-t-4 border-blue-500 border-solid h-12 w-12")
                //- div(class='flex')
                //-     div(class='w-full ml-1/5 sm:w-full xs:w-full')
                //-         #map.w-full.h-screen.bg-white.rounded-lg.shadow-md
                //- span.absolute.text-white.text-4xl.top-5.left-4.cursor-pointer(onclick='toggleSidebar()')
                //-     i.bi.bi-filter-left.px-2.bg-gray-900.rounded-md
                //- .sidebar.fixed.top-0.left-0.duration-300.p-2.overflow-y-auto.text-center.bg-gray-900.shadow.h-screen
                //-     .text-gray-100.text-xl
                //-         a.mt-1.flex.items-center.rounded-md(class='p-2.5')
                //-             i.bi.bi-droplet-fill.px-2.py-1.bg-blue-600.rounded-md
                //-             h1.ml-3.text-xl.text-gray-200.font-bold(class='text-[15px]') SIGCAPDAM
                //-             i.bi.bi-x.ml-20.cursor-pointer(onclick='toggleSidebar()')
                //-         hr.my-2.text-gray-600
                //-         div
                //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                //-                 i.bi.bi-crosshair2
                //-                 span.ml-4.text-gray-200(class='text-[15px]') Coordinates
                //-                 #mouse-position.text-gray-200.pl-2(class='text-[15px]')
                //-             .mt-3.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer.bg-gray-700(class='p-2.5')
                //-                 i.bi.bi-search.text-sm=
                //-                 input.ml-4.w-full.bg-transparent(class='text-[15px] focus:outline-none' placeholder='Buscar capa' id='search' name='search')
                //-             #jstree.leading-7.text-left.text-sm.font-thin.mt-2.mx-auto(class='w-4/5')
                //-             hr.my-4.text-gray-600
                //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                //-                 i.bi.bi-geo-alt-fill
                //-                 span.ml-4.text-gray-200(class='text-[15px]') Gestionar capas
                //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                //-                 i.bi.bi-people-fill
                //-                 span.ml-4.text-gray-200(class='text-[15px]') Gestionar usuarios
                //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600 hidden')
                //-                 i.bi.bi-chat-left-text-fill
                //-                 .flex.justify-between.w-full.items-center(onclick='dropDown()')
                //-                     span.ml-4.text-gray-200(class='text-[15px]') Chatbox
                //-                     span#arrow.text-sm.rotate-180
                //-                         i.bi.bi-chevron-down
                //-             #submenu.leading-7.text-left.text-sm.font-thin.mt-2.mx-auto(class='w-4/5')
                //-                 h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Social
                //-                 h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Personal
                //-                 h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Friends
                //-             .mt-3.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(id='logoutButton' class='p-2.5 hover:bg-blue-600')
                //-                 i.bi.bi-box-arrow-in-right
                //-                 button.ml-4.text-gray-200(class='text-[15px]') Logout

                include ./includes/footer.jade
                script(src='https://cdn.jsdelivr.net/npm/ol@v8.1.0/dist/ol.js')
                script(src="https://code.jquery.com/jquery-3.6.0.min.js")
                script(src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.11/jstree.min.js")
                script.
                    
                    // Set the user type
                    const userType = document.getElementById('userType');
                    if (sessionStorage.getItem('role_name') === 'root') {
                        userType.innerHTML = 'Admin';
                    } else {
                        userType.innerHTML = 'User';
                    }

                    // Script para la barra de buscar del jstree //
                    $(document).ready(function(){
                        $("#search").on("keyup", function() {
                            var value = $(this).val().toLowerCase();
                            $("#jstree li").filter(function() {
                                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                            });
                        });
                    })

                    document.addEventListener('DOMContentLoaded', function () {
                        const sidebar = document.getElementById('mySidebar');
                        const toggleButton = document.getElementById('toggleSidebar');

                        toggleButton.addEventListener('click', () => {
                            sidebar.classList.toggle('-ml-[-100%]');
                        });
                                            // Coordenadas que centrarán el mapa al cargar la página
                        var centerCoordinates = [-104.301939092764954, 19.066318856363417];

                        // Crear el mapa
                        var map = new ol.Map({
                            target: 'map',
                            layers: [
                                new ol.layer.Tile({
                                    source: new ol.source.OSM() // OpenStreetMap
                                })
                            ],
                            view: new ol.View({
                                center: ol.proj.fromLonLat(centerCoordinates),
                                zoom: 14
                            })
                        });

                        // Ver las coordenadas del mouse en el mapa
                        var mousePositionControl = new ol.control.MousePosition({
                            coordinateFormat: ol.coordinate.createStringXY(4),
                            projection: 'EPSG:4326',
                            className: 'custom-mouse-position',
                            target: document.getElementById('mouse-position'),
                            undefinedHTML: '&nbsp;'
                        });

                        map.addControl(mousePositionControl);
                        
                        if (!sessionStorage.getItem('token')) {
                            window.location.href = '/login';
                        } else {
                                
                            var iconStyle = new ol.style.Style({
                                image: new ol.style.Icon({
                                    anchor: [0.5, 0.5],
                                    anchorXUnits: 'fraction',
                                    anchorYUnits: 'fraction',
                                    src: 'assets/layer_icons/CONTRATOS.png',
                                    scale: 0.1
                                }),
                            });
                            
                            // Obtener todos los layers
                            fetch('/api/v1/layers/all', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': sessionStorage.getItem('token'),
                                },
                            })
                            .then((response) => response.json())
                                .then((layers) => {
                                    let categories = {};

                                    // Process the layers
                                    layers.forEach(function (layer) {
                                        // Ensure the URL is correct
                                        var geoJsonUrl = 'assets/layers/capas_js/' + layer.category + '/' + layer.archive;

                                        // Create a new iconStyle for each layer
                                        var iconStyleForLayer = new ol.style.Style({
                                            image: new ol.style.Icon({
                                                anchor: [0.5, 0.5],
                                                anchorXUnits: 'fraction',
                                                anchorYUnits: 'fraction',
                                                src: 'assets/layer_icons/' + layer.category + '/' + layer.name + '.png',
                                                scale: 1
                                            }),
                                        });

                                        var layerSource = new ol.source.Vector({
                                            url: geoJsonUrl,
                                            format: new ol.format.GeoJSON()
                                        });

                                        var vectorLayer = new ol.layer.Vector({
                                            source: layerSource,
                                            visible: false, // Start with the layer not 
                                            style: function(feature, resolution) {
                                                // Revisar si el layer es de tipo punto, línea o polígono
                                                if(feature.getGeometry().getType() === 'Point') {
                                                    return iconStyleForLayer;
                                                } else if(feature.getGeometry().getType() === 'LineString') {
                                                    var color = feature.get('COLOR_1');
                                                    return new ol.style.Style({
                                                        // Establecer el valor de color obtenido en el stroke
                                                        stroke: new ol.style.Stroke({
                                                            color: 'rgba('+ color +', 0.5)',
                                                            width: 2
                                                        })
                                                    });
                                                } else if(feature.getGeometry().getType() === 'Polygon') {
                                                    var color = feature.get('COLOR_1');
                                                    var color2 = feature.get('COLOR_2');
                                                    return new ol.style.Style({
                                                        stroke: new ol.style.Stroke({
                                                            color: 'rgba('+ color +', 0.5)',
                                                            width: 2
                                                        }),
                                                        fill: new ol.style.Fill({
                                                            color: 'rgba('+ color2 +', 0.5)'
                                                        })
                                                    });
                                                }
                                            }
                                        });

                                        var iconStyle = new ol.style.Style({
                                            image: new ol.style.Icon({
                                                anchor: [0.5, 0.5],
                                                anchorXUnits: 'fraction',
                                                anchorYUnits: 'fraction',
                                                src: 'assets/layer_icons/' + layer.category + '/' + layer.name + '.png',
                                                scale: 0.1
                                            }),
                                        });

                                        if(layer.name) {
                                            vectorLayer.set('name', layer.name);
                                        } else {
                                            vectorLayer.set('name', 'No name');
                                        }

                                        //- layerSource.once('change', function (e) {
                                        //-     if (layerSource.getState() === 'ready') {
                                        //-         var extent = layerSource.getExtent();
                                        //-         map.getView().fit(extent);
                                        //-     }
                                        //- });

                                        map.addLayer(vectorLayer);

                                        if(!categories[layer.category]) {
                                            categories[layer.category] = [];
                                        }

                                        // Add the layer to the category on jsTree
                                        categories[layer.category].push({
                                            id: layer.name,
                                            text: ' <img src="assets/layer_icons/' + layer.category  + '/' + layer.name + '.png" class="inline-block w-4 h-4"> ' + layer.name,
                                            state: {
                                                opened: true,
                                                selected: false
                                            }
                                        });
                                    });

                                    // Initialize JSTree
                                    let jstreeData = Object.keys(categories).map(category => {
                                        return {
                                            text: category,
                                            state: {
                                                opened: true // Open categories by default
                                            },
                                            children: categories[category]
                                        };
                                    });

                                    $("#jstree").jstree({
                                        "core": {
                                            "data": jstreeData,
                                            "themes": {
                                                "icons": false,
                                                "variant": "small",
                                                "stripes": false,
                                                "dots": false
                                            },
                                        },
                                        "checkbox": {
                                            "keep_selected_style": false
                                        },
                                        "plugins": ["checkbox", "themes", "search"],
                                        "search": {
                                            "case_sensitive": false,
                                            "show_only_matches": true
                                        }
                                    }).on('ready.jstree', function () {
                                        // Close all nodes once the tree is loaded
                                        var to = false;
                                        $('#jstree').jstree('close_all');
                                    }).on('changed.jstree', function (e, data) {
                                        // Get all selected nodes
                                        var selectedNodes = $('#jstree').jstree(true).get_selected();

                                        // Get all layers
                                        var layers = map.getLayers().getArray();
                                        var layersToProcess = layers.slice(1);

                                        // Loop through all layers
                                        layersToProcess.forEach(function (layer) {
                                            // Get the layer name
                                            var layerName = layer.get('name');

                                            // Determine if the current layer's name is in the array of selected nodes
                                            var isSelected = selectedNodes.indexOf(layerName) !== -1;

                                            // Set layer visibility based on whether it's selected
                                            layer.setVisible(isSelected);
                                        });
                                    });
                                })
                                .catch((error) => {
                                    console.error('Error fetching layers:', error);
                                });
                        }

                            // Logout
                            $('#logoutButton').on('click', function () {
                                sessionStorage.removeItem('token');
                                window.location.href = '/login';
                            });
                    });