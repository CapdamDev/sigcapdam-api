doctype html
html
    head
        title OpenLayers Map
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/ol@v8.1.0/ol.css')
        link(href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet")
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css")
        include ./includes/head.jade

    body(class='font-sans bg-gray-100')
        div(class="flex h-screen")
            div(class="bg-gray-800 text-white w-1/5 p-4")
                h1(class="text-2xl font-semibold mb-4")
                    | SIGCAPDAM
                div(class="mb-4")
                    label(for='layerSelector')
                        | Select Layer:  
                    select#layerSelector.w-full.mt-2.p-2.bg-gray-700.rounded
                        option(value='') Selecciona una capa
                        // The options will be populated dynamically using JavaScript
                div(class="mb-4")
                    form
                        select#type.w-full.mt-2.p-2.bg-gray-700.rounded
                            option(value='') Mover puntos
                            option(value='Point') Punto
                            option(value='LineString') Linea
                            option(value='Polygon') Area
                            option(value='Circle') Area circular
                div(class="mb-4")
                    div#mouse-position.custom-mouse-position
                div(class="mb-4")
                    button.editButton(class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded")
                        | Editar
                    button.saveButton(class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded ml-2")
                        | Guardar cambios
                div(class="mb-4")
                    div#jstree.p-4.bg-gray-800.text-white
                        ul
                            li.mb-2
                                span.jstree-icon
                                a.cursor-pointer
                                    | Root Node 1
                                ul.ml-4
                                    li.mb-2
                                        span.jstree-icon
                                        a.cursor-pointer
                                            | Child Node 1
                                    li.mb-2
                                        span.jstree-icon
                                        a.cursor-pointer
                                            | Child Node 2

            div(class='w-4/5 ml-1/5')
                #map.w-full.h-screen.bg-white.rounded-lg.shadow-md

        script(src='https://cdn.jsdelivr.net/npm/ol@v8.1.0/dist/ol.js')
        include ./includes/footer.jade
        script(src="https://code.jquery.com/jquery-3.6.0.min.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.11/jstree.min.js")

        script.
            var geoJSONDataUrl;
            var centerCoordinates = [-104.301939092764954, 19.066318856363417];
            var isEditingEnabled = false;
            var select, modify, map;
            // Variables para agregar geometrías
            var typeSelect = document.getElementById('type');
            var draw, snap; // global so we can remove it later

            fetch('/api/v1/layers/all')
                .then((response) => response.json())
                .then((layers) => {
                    // Ver la lista de layers almacenadas en la base de datos
                    layers.forEach(function (layer) {
                        var option = document.createElement('option');
                        option.value = layer.name;
                        option.text = layer.name;
                        document.getElementById('layerSelector').appendChild(option);
                    });
                })
                .catch((error) => {
                    console.error('Error fetching layers:', error);
                });

            // Crea el mapa base para proyectar el mapa
            document.addEventListener('DOMContentLoaded', function () {
                map = new ol.Map({
                    target: 'map',
                    layers: [
                        new ol.layer.Tile({
                            source: new ol.source.OSM()
                        }),
                        //- new ol.layer.Tile({
                        //-     source: new ol.source.BingMaps({
                        //-         key: 'AvtjE4pF2PZ9I2exWseQRop20mJA7RnIXEIy2IPqc4v9vIS-kw_Q0MNHLQZt4vq6',
                        //-         imagerySet: 'AerialWithLabels'
                        //-     })
                        //- }),
                        new ol.layer.Vector({
                            source: new ol.source.Vector({
                                url: geoJSONDataUrl,
                                format: new ol.format.GeoJSON()
                            })
                        })
                    ],
                    view: new ol.View({
                        center: ol.proj.fromLonLat(centerCoordinates),
                        zoom: 14
                    })
                });

                // Ver las coordenadas del mouse en el mapa
                var mousePositionControl = new ol.control.MousePosition({
                    coordinateFormat: ol.coordinate.createStringXY(4),
                    projection: 'EPSG:4326',
                    className: 'custom-mouse-position',
                    target: document.getElementById('mouse-position'),
                    undefinedHTML: '&nbsp;'
                });

                map.addControl(mousePositionControl);
                addSelectAndModifyInteractions();
            });

            layerSelector.addEventListener('change', function () {
                var selectedLayer = this.value;
                updateMap(selectedLayer);
            });

            // Función para actualizar el mapa
            function updateMap(selectedLayer) {
                geoJSONDataUrl = 'assets/layers/capas_js/' + selectedLayer;
                var vectorSource = new ol.source.Vector({
                    format: new ol.format.GeoJSON(),
                    url: geoJSONDataUrl
                });

                //- var vectorStyle = new ol.style.Style({
                //-     stroke: new ol.style.Stroke({
                //-         color: '#ffcc33',
                //-         width: 6
                //-     }),
                //- });

                // Ver la información de la capa seleccionada
                fetch('/' + geoJSONDataUrl)
                    .then((response) => response.json())
                    .then((data) => {
                        console.log(data);
                    })
                    .catch((error) => {
                        console.error('Error fetching GeoJSON data:', error);
                    });

                // Actualiza la capa vectorial del mapa
                map.getLayers().item(1).setSource(vectorSource);
                //- map.getLayers().item(1).setStyle(vectorStyle);
            }

            function addSelectAndModifyInteractions() {
                // Obtiene la capa vectorial que contiene nuestras geometrías editables
                var vectorLayer = map.getLayers().item(1);

                // Interacción para seleccionar geometrías
                var select = new ol.interaction.Select({
                    layers: [vectorLayer] // Asegúrate de que solo las capas editables sean seleccionables
                });

                // Interacción para modificar geometrías seleccionadas
                var modify = new ol.interaction.Modify({
                    features: select.getFeatures() // Solo las características seleccionadas serán modificables
                });

                map.on('singleclick', function(event) {
                    if (!isEditingEnabled) {
                        map.forEachFeatureAtPixel(event.pixel, function(feature) {
                            var geom = feature.getGeometry();
                            if (geom instanceof ol.geom.Point) {
                                var properties = feature.getProperties();
                                // Implementa aquí tu lógica para mostrar el pop-up
                                alert('Propiedades: ' + JSON.stringify(properties));
                                console.log(properties);
                            }
                            if(geom instanceof ol.geom.LineString) {
                                var properties = feature.getProperties();
                                // Implementa aquí tu lógica para mostrar el pop-up
                                alert('Propiedades: ' + JSON.stringify(properties));
                                console.log(properties);
                            }
                            if(geom instanceof ol.geom.Polygon) {
                                var properties = feature.getProperties();
                                // Implementa aquí tu lógica para mostrar el pop-up
                                alert('Propiedades: ' + JSON.stringify(properties));
                                console.log(properties);
                            }
                            if(geom instanceof ol.geom.MultiPoint) {
                                var properties = feature.getProperties();
                                // Implementa aquí tu lógica para mostrar el pop-up
                                alert('Propiedades: ' + JSON.stringify(properties));
                                console.log(properties);
                            }
                            if(geom instanceof ol.geom.MultiLineString) {
                                var properties = feature.getProperties();
                                // Implementa aquí tu lógica para mostrar el pop-up
                                alert('Propiedades: ' + JSON.stringify(properties));
                                console.log(properties);
                            }
                            if(geom instanceof ol.geom.MultiPolygon) {
                                var properties = feature.getProperties();
                                // Implementa aquí tu lógica para mostrar el pop-up
                                alert('Propiedades: ' + JSON.stringify(properties));
                                console.log(properties);
                            }
                        });
                    }
                });

                // Funcionalidad del botón para editar geometrías
                $('.editButton').click(function () {
                    if (isEditingEnabled) {
                        // Deshabilita la edición
                        isEditingEnabled = false;
                        select.setActive(false);
                        modify.setActive(false);
                        map.removeInteraction(select);
                        map.removeInteraction(modify);
                        $(this).removeClass('bg-red-500');
                        $(this).addClass('bg-blue-500');
                        $(this).text('Editar');
                    } else {
                        // Habilita la edición
                        isEditingEnabled = true;
                        select.setActive(true);
                        modify.setActive(true);
                        map.addInteraction(select);
                        map.addInteraction(modify);
                        $(this).removeClass('bg-blue-500');
                        $(this).addClass('bg-red-500');
                        $(this).text('Terminar edición');
                    }

                    function addInteractions() {
                        draw = new ol.interaction.Draw({
                            source: vectorLayer.getSource(),
                            type: typeSelect.value
                        });
                        map.addInteraction(draw);
                        snap = new ol.interaction.Snap({source: vectorLayer.getSource()});
                        map.addInteraction(snap);
                    }

                    typeSelect.onchange = function () {
                        map.removeInteraction(draw);
                        map.removeInteraction(snap);
                        addInteractions();
                    };
                });
                
            }
            
            $('#jstree').jstree({
                "core": {
                    "themes": {
                        "variant": "large"
                    }
                },
                "checkbox": {
                    "keep_selected_style": false
                },
                "plugins": ["checkbox"]
            });

            //- // Manejo del evento para cuando se termina de modificar una geometría
            //- modify.on('modifyend', function(event) {
            //-     // Obtiene el nombre de la capa y lo envia al endpoint para actualizar la geometría
            //-     var layerName = event.features.getArray()[0].getGeometryName();
            //-     var geoJSON = new ol.format.GeoJSON();
            //-     var geometry = geoJSON.writeGeometry(event.features.getArray()[0].getGeometry());
            //-     var data = {
            //-         'layerName': layerName,
            //-         'geometry': geometry
            //-     };

            //- });