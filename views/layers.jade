doctype html
html
    head
        title SIGCAPDAM - Capas
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/ol@v8.1.0/ol.css')
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css")
        include ./includes/head.jade

    body(class='bg-white dark:bg-gray-900')
        aside(class='compact-nav fixed group overflow-hidden left-0 top-0 z-10 h-screen w-[calc(3.73rem)] border-r border-gray-300/40 bg-white dark:bg-gray-900 dark:border-gray-700 hover:w-56 hover:shadow-2xl')
            div(class='h-full flex flex-col justify-between')
                div
                    div(class='h-16 border-b border-gray-300/40 dark:border-gray-700 flex items-center justify-center')
                        a(href='#' class='block w-max px-2.5')
                            img(class='w-auto h-10 rounded-full' src='./assets/img/profile.png' alt='')
                    div(class='mt-6')
                        ul(class='px-1 -ml-px space-y-4 font-medium tracking-wide')
                            li(class='w-max space-y-4 group-hover:w-full')
                                a(href='#' class='block py-3 w-[52px] rounded-full bg-sky-500 group-hover:w-full')
                                    div(class='w-max flex items-center px-3 gap-4')
                                        svg(class='h-7 w-7' xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-map-fill" viewBox="0 0 16 16")
                                            path(fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.598-.49L10.5.99 5.598.01a.5.5 0 0 0-.196 0l-5 1A.5.5 0 0 0 0 1.5v14a.5.5 0 0 0 .598.49l4.902-.98 4.902.98a.502.502 0 0 0 .196 0l5-1A.5.5 0 0 0 16 14.5V.5zM5 14.09V1.11l.5-.1.5.1v12.98l-.402-.08a.498.498 0 0 0-.196 0L5 14.09zm5 .8V1.91l.402.08a.5.5 0 0 0 .196 0L11 1.91v12.98l-.5.1-.5-.1z")
                                        span(class='text-white') Layers
                            li(class='w-max')
                                a(href='#')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg')
                                            path(class='fill-gray-500 dark:fill-gray-100' fillrule='evenodd' cliprule='evenodd' d='M2 5a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM2 10a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM3 15a1 1 0 100 2h14a1 1 0 100-2H3z')
                                        span(class='text-gray-600 dark:text-gray-300') Categories
                            li(class='w-max')
                                a(href='#')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg')
                                            path(class='fill-gray-500 dark:fill-gray-100' fillrule='evenodd' cliprule='evenodd' d='M2 5a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM2 10a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM3 15a1 1 0 100 2h14a1 1 0 100-2H3z')
                                        span(class='text-gray-600 dark:text-gray-300') Categories
                            li(class='w-max')
                                a(href='#')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg')
                                            path(class='fill-gray-500 dark:fill-gray-100' fillrule='evenodd' cliprule='evenodd' d='M2 5a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM2 10a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM3 15a1 1 0 100 2h14a1 1 0 100-2H3z')
                                        span(class='text-gray-600 dark:text-gray-300') Categories
                            li(class='w-max')
                                a(href='#')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg')
                                            path(class='fill-gray-500 dark:fill-gray-100' fillrule='evenodd' cliprule='evenodd' d='M2 5a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM2 10a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM3 15a1 1 0 100 2h14a1 1 0 100-2H3z')
                                        span(class='text-gray-600 dark:text-gray-300') Categories
                div(class='py-4 px-2 border-t border-gray-300/40 dark:border-gray-700')
                    a(href='#')
                        div(class='w-max flex items-center gap-4')
                            img(class='w-10 h-10 rounded-full' src='https://avatars.githubusercontent.com/u/31113941?v=4' alt='')
                            div
                                h6(class='text-gray-600 font-medium dark:text-gray-200') Nombre
                                span(class='block -mt-0.5 text-xs text-gray-500 dark:text-white') Role
        main.ml-auto(class='w-[calc(100%-3.73rem)]')
            div(class='2xl:w-auto mx-auto space-y-6')
                div(class='h-16 items-center border border-gray-300/40 dark:border-gray-700 flex justify-between px-6 lg:px-12')
                    //- Coordenadas del mouse
                    div(class='flex items-center')
                        span(class='text-gray-500 dark:text-gray-200') Coordenadas del mouse:
                        span#mouse-position.text-gray-500(class='dark:text-gray-200 ml-2')
                    span(class='text-left text-white') Text Element 2

                div(class='px-6 lg:px-12')
                    #map(class='h-96 flex justify-center items-center rounded-2xl border border-dashed border-gray-300/40 dark:border-gray-700')
                        //- #map(class='w-full h-full bg-gray-100 rounded-2xl')
                        //- span(class='text-gray-500 dark:text-gray-200') Content

                        //-     div(class="animate-spin rounded-full border-t-4 border-blue-500 border-solid h-12 w-12")
                        //- div(class='flex')
                        //-     div(class='w-full ml-1/5 sm:w-full xs:w-full')
                        //-         #map.w-full.h-screen.bg-white.rounded-lg.shadow-md
                        //- span.absolute.text-white.text-4xl.top-5.left-4.cursor-pointer(onclick='toggleSidebar()')
                        //-     i.bi.bi-filter-left.px-2.bg-gray-900.rounded-md
                        //- .sidebar.fixed.top-0.left-0.duration-300.p-2.overflow-y-auto.text-center.bg-gray-900.shadow.h-screen
                        //-     .text-gray-100.text-xl
                        //-         a.mt-1.flex.items-center.rounded-md(class='p-2.5')
                        //-             i.bi.bi-droplet-fill.px-2.py-1.bg-blue-600.rounded-md
                        //-             h1.ml-3.text-xl.text-gray-200.font-bold(class='text-[15px]') SIGCAPDAM
                        //-             i.bi.bi-x.ml-20.cursor-pointer(onclick='toggleSidebar()')
                        //-         hr.my-2.text-gray-600
                        //-         div
                        //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        //-                 i.bi.bi-crosshair2
                        //-                 span.ml-4.text-gray-200(class='text-[15px]') Coordinates
                        //-                 #mouse-position.text-gray-200.pl-2(class='text-[15px]')
                        //-             .mt-3.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer.bg-gray-700(class='p-2.5')
                        //-                 i.bi.bi-search.text-sm=
                        //-                 input.ml-4.w-full.bg-transparent(class='text-[15px] focus:outline-none' placeholder='Buscar capa' id='search' name='search')
                        //-             #jstree.leading-7.text-left.text-sm.font-thin.mt-2.mx-auto(class='w-4/5')
                        //-             hr.my-4.text-gray-600
                        //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        //-                 i.bi.bi-geo-alt-fill
                        //-                 span.ml-4.text-gray-200(class='text-[15px]') Gestionar capas
                        //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        //-                 i.bi.bi-people-fill
                        //-                 span.ml-4.text-gray-200(class='text-[15px]') Gestionar usuarios
                        //-             .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600 hidden')
                        //-                 i.bi.bi-chat-left-text-fill
                        //-                 .flex.justify-between.w-full.items-center(onclick='dropDown()')
                        //-                     span.ml-4.text-gray-200(class='text-[15px]') Chatbox
                        //-                     span#arrow.text-sm.rotate-180
                        //-                         i.bi.bi-chevron-down
                        //-             #submenu.leading-7.text-left.text-sm.font-thin.mt-2.mx-auto(class='w-4/5')
                        //-                 h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Social
                        //-                 h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Personal
                        //-                 h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Friends
                        //-             .mt-3.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(id='logoutButton' class='p-2.5 hover:bg-blue-600')
                        //-                 i.bi.bi-box-arrow-in-right
                        //-                 button.ml-4.text-gray-200(class='text-[15px]') Logout

                        include ./includes/footer.jade
                        script(src='https://cdn.jsdelivr.net/npm/ol@v8.1.0/dist/ol.js')
                        script(src="https://code.jquery.com/jquery-3.6.0.min.js")
                        script(src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.11/jstree.min.js")
                        script.

                            // Set the user type
                            //- const userType = document.getElementById('userType');
                            //- if (sessionStorage.getItem('role_name') === 'root') {
                            //-     userType.innerHTML = 'Admin';
                            //- } else {
                            //-     userType.innerHTML = 'User';
                            //- }

                            // Script para la barra de buscar del jstree //
                            $(document).ready(function(){
                                $("#search").on("keyup", function() {
                                    var value = $(this).val().toLowerCase();
                                    $("#jstree li").filter(function() {
                                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                                    });
                                });
                            })

                            document.addEventListener('DOMContentLoaded', function () {
                                    // Coordenadas que centrarán el mapa al cargar la página
                                var centerCoordinates = [-104.301939092764954, 19.066318856363417];

                                // Crear el mapa
                                var map = new ol.Map({
                                    target: 'map',
                                    layers: [
                                        new ol.layer.Tile({
                                            source: new ol.source.OSM() // OpenStreetMap
                                        })
                                    ],
                                    view: new ol.View({
                                        center: ol.proj.fromLonLat(centerCoordinates),
                                        zoom: 14
                                    })
                                });

                                // Ver las coordenadas del mouse en el mapa
                                var mousePositionControl = new ol.control.MousePosition({
                                    coordinateFormat: ol.coordinate.createStringXY(4),
                                    projection: 'EPSG:4326',
                                    className: 'custom-mouse-position',
                                    target: document.getElementById('mouse-position'),
                                    undefinedHTML: '&nbsp;'
                                });

                                map.addControl(mousePositionControl);

                                if (!sessionStorage.getItem('token')) {
                                    window.location.href = '/login';
                                } else {

                                    var iconStyle = new ol.style.Style({
                                        image: new ol.style.Icon({
                                            anchor: [0.5, 0.5],
                                            anchorXUnits: 'fraction',
                                            anchorYUnits: 'fraction',
                                            src: 'assets/layer_icons/CONTRATOS.png',
                                            scale: 0.1
                                        }),
                                    });

                                    // Obtener todos los layers
                                    fetch('/api/v1/layers/all', {
                                        method: 'GET',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'Authorization': sessionStorage.getItem('token'),
                                        },
                                    })
                                    .then((response) => response.json())
                                        .then((layers) => {
                                            let categories = {};

                                            // Process the layers
                                            layers.forEach(function (layer) {
                                                // Ensure the URL is correct
                                                var geoJsonUrl = 'assets/layers/capas_js/' + layer.category + '/' + layer.archive;

                                                // Create a new iconStyle for each layer
                                                var iconStyleForLayer = new ol.style.Style({
                                                    image: new ol.style.Icon({
                                                        anchor: [0.5, 0.5],
                                                        anchorXUnits: 'fraction',
                                                        anchorYUnits: 'fraction',
                                                        src: 'assets/layer_icons/' + layer.category + '/' + layer.name + '.png',
                                                        scale: 1
                                                    }),
                                                });

                                                var layerSource = new ol.source.Vector({
                                                    url: geoJsonUrl,
                                                    format: new ol.format.GeoJSON()
                                                });

                                                var vectorLayer = new ol.layer.Vector({
                                                    source: layerSource,
                                                    visible: false, // Start with the layer not 
                                                    style: function(feature, resolution) {
                                                        // Revisar si el layer es de tipo punto, línea o polígono
                                                        if(feature.getGeometry().getType() === 'Point') {
                                                            return iconStyleForLayer;
                                                        } else if(feature.getGeometry().getType() === 'LineString') {
                                                            var color = feature.get('COLOR_1');
                                                            return new ol.style.Style({
                                                                // Establecer el valor de color obtenido en el stroke
                                                                stroke: new ol.style.Stroke({
                                                                    color: 'rgba('+ color +', 0.5)',
                                                                    width: 2
                                                                })
                                                            });
                                                        } else if(feature.getGeometry().getType() === 'Polygon') {
                                                            var color = feature.get('COLOR_1');
                                                            var color2 = feature.get('COLOR_2');
                                                            return new ol.style.Style({
                                                                stroke: new ol.style.Stroke({
                                                                    color: 'rgba('+ color +', 0.5)',
                                                                    width: 2
                                                                }),
                                                                fill: new ol.style.Fill({
                                                                    color: 'rgba('+ color2 +', 0.5)'
                                                                })
                                                            });
                                                        }
                                                    }
                                                });

                                                var iconStyle = new ol.style.Style({
                                                    image: new ol.style.Icon({
                                                        anchor: [0.5, 0.5],
                                                        anchorXUnits: 'fraction',
                                                        anchorYUnits: 'fraction',
                                                        src: 'assets/layer_icons/' + layer.category + '/' + layer.name + '.png',
                                                        scale: 0.1
                                                    }),
                                                });

                                                if(layer.name) {
                                                    vectorLayer.set('name', layer.name);
                                                } else {
                                                    vectorLayer.set('name', 'No name');
                                                }

                                                //- layerSource.once('change', function (e) {
                                                //-     if (layerSource.getState() === 'ready') {
                                                //-         var extent = layerSource.getExtent();
                                                //-         map.getView().fit(extent);
                                                //-     }
                                                //- });

                                                map.addLayer(vectorLayer);

                                                if(!categories[layer.category]) {
                                                    categories[layer.category] = [];
                                                }

                                                // Add the layer to the category on jsTree
                                                categories[layer.category].push({
                                                    id: layer.name,
                                                    text: ' <img src="assets/layer_icons/' + layer.category  + '/' + layer.name + '.png" class="inline-block w-4 h-4"> ' + layer.name,
                                                    state: {
                                                        opened: true,
                                                        selected: false
                                                    }
                                                });
                                            });

                                            // Initialize JSTree
                                            let jstreeData = Object.keys(categories).map(category => {
                                                return {
                                                    text: category,
                                                    state: {
                                                        opened: true // Open categories by default
                                                    },
                                                    children: categories[category]
                                                };
                                            });

                                            $("#jstree").jstree({
                                                "core": {
                                                    "data": jstreeData,
                                                    "themes": {
                                                        "icons": false,
                                                        "variant": "small",
                                                        "stripes": false,
                                                        "dots": false
                                                    },
                                                },
                                                "checkbox": {
                                                    "keep_selected_style": false
                                                },
                                                "plugins": ["checkbox", "themes", "search"],
                                                "search": {
                                                    "case_sensitive": false,
                                                    "show_only_matches": true
                                                }
                                            }).on('ready.jstree', function () {
                                                // Close all nodes once the tree is loaded
                                                var to = false;
                                                $('#jstree').jstree('close_all');
                                            }).on('changed.jstree', function (e, data) {
                                                // Get all selected nodes
                                                var selectedNodes = $('#jstree').jstree(true).get_selected();

                                                // Get all layers
                                                var layers = map.getLayers().getArray();
                                                var layersToProcess = layers.slice(1);

                                                // Loop through all layers
                                                layersToProcess.forEach(function (layer) {
                                                    // Get the layer name
                                                    var layerName = layer.get('name');

                                                    // Determine if the current layer's name is in the array of selected nodes
                                                    var isSelected = selectedNodes.indexOf(layerName) !== -1;

                                                    // Set layer visibility based on whether it's selected
                                                    layer.setVisible(isSelected);
                                                });
                                            });
                                        })
                                        .catch((error) => {
                                            console.error('Error fetching layers:', error);
                                        });
                                }

                                    // Logout
                                    $('#logoutButton').on('click', function () {
                                        sessionStorage.removeItem('token');
                                        window.location.href = '/login';
                                    });
                            });