doctype html
html
    head
        title OpenLayers Map
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/ol@v8.1.0/ol.css')
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css")
        include ./includes/head.jade

    body(class='font-sans bg-gray-100')
        #loadingSpinner(class='fixed top-0 left-0 w-screen h-screen flex justify-center items-center bg-white bg-opacity-100 z-50')
            div(class="animate-spin rounded-full border-t-4 border-blue-500 border-solid h-12 w-12")
        div(class='flex')
            div(class='w-full ml-1/5 sm:w-full xs:w-full')
                #map.w-full.h-screen.bg-white.rounded-lg.shadow-md
        span.absolute.text-white.text-4xl.top-5.left-4.cursor-pointer(onclick='openBar()')
            i.bi.bi-filter-left.px-2.bg-gray-900.rounded-md
        .sidebar.fixed.top-0.bottom-0.duration-1000.p-2.overflow-y-auto.text-center.bg-gray-900.shadow.h-screen(class='lg:left-0 left-[-300px] w-[300px]')
            .text-gray-100.text-xl
                .mt-1.flex.items-center.rounded-md(class='p-2.5')
                    i.bi.bi-droplet-fill.px-2.py-1.bg-blue-600.rounded-md
                    h1.ml-3.text-xl.text-gray-200.font-bold(class='text-[15px]') SIGCAPDAM
                    i.bi.bi-x.ml-20.cursor-pointer(class='lg:hidden' onclick='openBar()')
                hr.my-2.text-gray-600
                div
                    .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        i.bi.bi-house-door-fill
                        span.ml-4.text-gray-200(class='text-[15px]') Home
                    .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        i.bi.bi-geo-alt-fill
                        span.ml-4.text-gray-200(class='text-[15px]') Layers
                    .mt-3.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer.bg-gray-700(class='p-2.5')
                        i.bi.bi-search.text-sm
                        input.ml-4.w-full.bg-transparent(class='text-[15px] focus:outline-none' placeholder='Buscar capa' id='search' name='search')
                    #jstree.leading-7.text-left.text-sm.font-thin.mt-2.mx-auto(class='w-4/5')
                    .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        i.bi.bi-crosshair2
                        span.ml-4.text-gray-200(class='text-[15px]') Coordinates
                        #mouse-position.text-gray-200.pl-2(class='text-[15px]')
                    hr.my-4.text-gray-600
                    .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        i.bi.bi-envelope-fill
                        span.ml-4.text-gray-200(class='text-[15px]') Messages
                    .mt-2.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(class='p-2.5 hover:bg-blue-600')
                        i.bi.bi-chat-left-text-fill
                        .flex.justify-between.w-full.items-center(onclick='dropDown()')
                            span.ml-4.text-gray-200(class='text-[15px]') Chatbox
                            span#arrow.text-sm.rotate-180
                                i.bi.bi-chevron-down
                    #submenu.leading-7.text-left.text-sm.font-thin.mt-2.mx-auto(class='w-4/5')
                        h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Social
                        h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Personal
                        h1.cursor-pointer.p-2.rounded-md.mt-1(class='hover:bg-gray-700') Friends
                    .mt-3.flex.items-center.rounded-md.px-4.duration-300.cursor-pointer(id='logoutButton' class='p-2.5 hover:bg-blue-600')
                        i.bi.bi-box-arrow-in-right
                        button.ml-4.text-gray-200(class='text-[15px]') Logout
                        //- span.ml-4.text-gray-200(class='text-[15px]' ) Logout
                script(src='https://cdn.jsdelivr.net/npm/ol@v8.1.0/dist/ol.js')
                include ./includes/footer.jade
                script(src="https://code.jquery.com/jquery-3.6.0.min.js")
                script(src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.11/jstree.min.js")

                script.
                    // Script para la barra de buscar del jstree //
                    $(document).ready(function(){
                        $("#search").on("keyup", function() {
                            var value = $(this).val().toLowerCase();
                            $("#jstree li").filter(function() {
                                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                            });
                        });
                    })

                    // Script del dropdown manual //
                    function dropDown() {
                        document.querySelector('#submenu').classList.toggle('hidden');
                        document.querySelector('#arrow').classList.toggle('rotate-0');
                    }
                    dropDown()

                    // Script para abrir y cerrar la barra lateral responsiva //
                    function openBar() {
                        document.querySelector('.sidebar').classList.toggle('left-[-300px]');
                    }


                    document.addEventListener('DOMContentLoaded', function () {
                        const loadingSpinner = document.getElementById('loadingSpinner');



                        // Coordenadas que centrarán el mapa al cargar la página
                        var centerCoordinates = [-104.301939092764954, 19.066318856363417];

                        // Crear el mapa
                        var map = new ol.Map({
                            target: 'map',
                            layers: [
                                new ol.layer.Tile({
                                    source: new ol.source.OSM() // OpenStreetMap
                                })
                            ],
                            view: new ol.View({
                                center: ol.proj.fromLonLat(centerCoordinates),
                                zoom: 14
                            })
                        });

                        // Ver las coordenadas del mouse en el mapa
                        var mousePositionControl = new ol.control.MousePosition({
                            coordinateFormat: ol.coordinate.createStringXY(4),
                            projection: 'EPSG:4326',
                            className: 'custom-mouse-position',
                            target: document.getElementById('mouse-position'),
                            undefinedHTML: '&nbsp;'
                        });

                        map.addControl(mousePositionControl);
                        
                        if (!localStorage.getItem('token')) {
                            window.location.href = '/login';
                        } else {

                            var permissions = localStorage.getItem('udata');
                            // Get the typeof permissions variable
                            console.log(typeof permissions);
                            // Compose permissions string in array
                            permissions = permissions.split(',');
                            // Get the typeof permissions variable
                            console.log(typeof permissions);
                            console.log(permissions);
                            
                            // Obtener todos los layers
                            fetch('/api/v1/layers/all', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': localStorage.getItem('token'),
                                },
                            })
                            .then((response) => response.json())
                                .then((layers) => {
                                    let categories = {};

                                    // Process the layers
                                    layers.forEach(function (layer) {
                                        // Ensure the URL is correct
                                        var geoJsonUrl = 'assets/layers/capas_js/' + layer.name;
                                        var layerSource = new ol.source.Vector({
                                            url: geoJsonUrl,
                                            format: new ol.format.GeoJSON()
                                        });

                                        var vectorLayer = new ol.layer.Vector({
                                            source: layerSource,
                                            visible: false // Start with the layer not visible
                                        });

                                        if(layer.name) {
                                            vectorLayer.set('name', layer.name);
                                        } else {
                                            vectorLayer.set('name', 'No name');
                                        }

                                        // Console log the layer name and features, then console log the AFLUENTE property of each feature

                                        layerSource.once('change', function (e) {
                                            if (layerSource.getState() === 'ready') {
                                                var features = layerSource.getFeatures(function (feature) {
                                                    console.log(feature.get('AFLUENTE'));
                                                });
                                                console.group('Layers data');
                                                console.log('Layer name:', layer.name);
                                                console.log('Features:', features);
                                                console.groupEnd();
                                            }
                                        });

                                        //- layerSource.once('change', function (e) {
                                        //-     if (layerSource.getState() === 'ready') {
                                        //-         var extent = layerSource.getExtent();
                                        //-         map.getView().fit(extent);
                                        //-     }
                                        //- });

                                        map.addLayer(vectorLayer);

                                        if(!categories[layer.category]) {
                                            categories[layer.category] = [];
                                        }

                                        // Add the layer to the category
                                        categories[layer.category].push({
                                            id: layer.name,
                                            text: layer.name,
                                            state: {
                                                opened: true,
                                                selected: false
                                            }
                                        });
                                    });

                                    // Initialize JSTree
                                    let jstreeData = Object.keys(categories).map(category => {
                                        return {
                                            text: category,
                                            state: {
                                                opened: true // Open categories by default
                                            },
                                            children: categories[category]
                                        };
                                    });

                                    $("#jstree").jstree({
                                        "core": {
                                            "data": jstreeData,
                                            "themes": {
                                                "icons": true,
                                                "variant": "small",
                                                "stripes": false,
                                                "dots": false
                                            },
                                        },
                                        "checkbox": {
                                            "keep_selected_style": false
                                        },
                                        "plugins": ["checkbox", "themes", "search"],
                                        "search": {
                                            "case_sensitive": false,
                                            "show_only_matches": true
                                        }
                                    }).on('ready.jstree', function () {
                                        // Close all nodes once the tree is loaded
                                        var to = false;
                                        $('#jstree').jstree('close_all');
                                    }).on('changed.jstree', function (e, data) {
                                        // Get all selected nodes
                                        var selectedNodes = $('#jstree').jstree(true).get_selected();

                                        // Get all layers
                                        var layers = map.getLayers().getArray();
                                        var layersToProcess = layers.slice(1);

                                        // Loop through all layers
                                        layersToProcess.forEach(function (layer) {
                                            // Get the layer name
                                            var layerName = layer.get('name');

                                            // Determine if the current layer's name is in the array of selected nodes
                                            var isSelected = selectedNodes.indexOf(layerName) !== -1;

                                            // Set layer visibility based on whether it's selected
                                            layer.setVisible(isSelected);
                                        });
                                    });

                                    loadingSpinner.classList.add('hidden');
                                })
                                .catch((error) => {
                                    console.error('Error fetching layers:', error);
                                    loadingSpinner.classList.add('hidden');
                                });
                        }

                            // Logout
                            $('#logoutButton').on('click', function () {
                                localStorage.removeItem('token');
                                window.location.href = '/login';
                            });
                    });