doctype html
html(lang='es')
    head
        title SIGCAPDAM - Gestión de roles
        include ../includes/head.jade
        style(type="text/css").
            .dataTables_wrapper .dataTables_length select{
                width: 5rem;
            }
            .dataTables_length{
                margin-left: 2rem;
            }
            .dataTables_filter{
                margin-right: 1rem;
                margin-bottom: 1rem;
                margin-left: 1rem;
            }
            #rolesTable_wrapper{
                margin-top: .7rem;
                margin-bottom: .5rem;
            }

    body(class='bg-white dark:bg-gray-900')
        include ../includes/sidebar.jade
        block content

        main.ml-auto(class='w-[calc(100%-3.73rem)]')
            div(class='2xl:w-auto mx-auto space-y-6')
                div(class="h-16 items-center border-b border-gray-700 flex justify-between px-6 lg:px-12")
                    //- Coordenadas del mouse
                    div(class='flex items-center lg:text-xl md:text-md sm:text-sm')
                        //- Add a button to go back to the previous page
                        button(type="button" class="flex items-center justify-center text-white bg-sky-500 hover:bg-sky-800 focus:ring-4 focus:ring-sky-300 font-medium rounded-full text-sm px-4 py-2 dark:bg-sky-600 dark:hover:bg-sky-500 focus:outline-none dark:focus:ring-sky-800" onclick="window.location.href='/settings'")
                            svg(class='w-4 h-4 mr-1' xmlns='http://www.w3.org/2000/svg' fill='none' viewbox='0 0 24 24' stroke='currentColor')
                                path(stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10 19l-7-7m0 0l7-7m-7 7h18')
                            span(class='ml-1') Regresar
                        span(class='text-gray-500 dark:text-gray-200 ml-4') Roles
                    button(type="button" id="createRoleModalButton" data-modal-target="createRoleModal" data-modal-toggle="createRoleModal" class="flex items-center justify-center text-white bg-sky-500 hover:bg-sky-800 focus:ring-4 focus:ring-sky-300 font-medium rounded-full text-sm px-4 py-2 dark:bg-sky-600 dark:hover:bg-sky-500 focus:outline-none dark:focus:ring-sky-800")
                                svg(class="h-3.5 w-3.5 mr-2" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true")
                                    path(clip-rule="evenodd" fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z")
                                | Nuevo rol
                div(class='px-6 h-[calc(55rem)]')
                    //- CRUD para gestionar las capas cargadas
                    section(class="px-3 h-auto w-full rounded-2xl bg-gray-50 dark:bg-gray-900 antialiased")
                        div(class="w-full h-full")
                            div(class="bg-white dark:bg-gray-800 shadow-md sm:rounded-lg overflow-hidden w-full h-full")
                                div(class="h-full overflow-x-auto w-full")
                                    table#rolesTable.display(class="table text-sm text-left text-gray-500 dark:text-gray-400 w-full flex-nowrap overflow-auto" style="width: 100% !important;")
                                        thead(class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400")
                                            tr
                                                th(scope="col" class="px-6 py-4") #
                                                th(scope="col" class="px-6 py-4") Rol
                                                th(scope="col" class="px-6 py-4") Descripción
                                                th(scope="col" class="px-6 py-4") Status
                                                th(scope="col" class="px-6 py-4") Total de permisos
                                                th(scope="col" class="px-6 py-4") Usuarios asignados
                                                th(scope="col" class="px-6 py-4") Acciones
                                                    span(class="sr-only") Actions
                                        tbody(id="rolesTbody")
                                            each role in roles
                                                - let src = "./assets/users/pictures/profile.png"
                                                tr(class="border-b dark:border-gray-700")
                                                    th(id="roleId" scope="row" class="px-3 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white" value=role.id)=role.id
                                                    td(id="roleName" scope="row" class="px-4 py-3 text-sm font-medium" value=role.role_name)=role.role_name
                                                    td(id="roleDescription" scope="row" class="px-4 py-3 text-sm font-medium" value=role.role_description)=role.role_description
                                                    td(id="roleStatus" scope="row" class="px-4 py-3 text-sm font-medium" value=role.isActive)=role.isActive
                                                    td(id="roleTotal" scope="row" class="px-4 py-3 text-sm font-medium" value=role.permissionsCount)=role.permissionsCount
                                                    td(id="roleUsers" scope="row" class="px-4 py-3 text-sm font-medium" value=role.usersCount)=role.usersCount
                                                    td(id="roleActions" scope="row" class="px-4 py-3 items-center")
                                                        div(class="space-x-2")
                                                                button(class=" hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white text-gray-700 dark:text-gray-200" type="button" data-modal-target="updateRoleModal" data-modal-toggle="updateRoleModal" id="updateModalButton" value=role.id)
                                                                    svg(svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor" aria-hidden="true")
                                                                        path(d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z")
                                                                        path(fill-rule="evenodd" clip-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z")
                                                                button(class="hover:bg-gray-100 dark:hover:bg-gray-600 text-red-500 dark:hover:text-red-400" type="button" data-modal-target="deleteModal" data-modal-toggle="deleteModal" id="deleteModalButton" value=role.id)
                                                                    svg(class="w-4 h-4 mr-2" viewbox="0 0 14 15" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true")
                                                                        path(fill-rule="evenodd" clip-rule="evenodd" fill="currentColor" d="M6.09922 0.300781C5.93212 0.30087 5.76835 0.347476 5.62625 0.435378C5.48414 0.523281 5.36931 0.649009 5.29462 0.798481L4.64302 2.10078H1.59922C1.36052 2.10078 1.13161 2.1956 0.962823 2.36439C0.79404 2.53317 0.699219 2.76209 0.699219 3.00078C0.699219 3.23948 0.79404 3.46839 0.962823 3.63718C1.13161 3.80596 1.36052 3.90078 1.59922 3.90078V12.9008C1.59922 13.3782 1.78886 13.836 2.12643 14.1736C2.46399 14.5111 2.92183 14.7008 3.39922 14.7008H10.5992C11.0766 14.7008 11.5344 14.5111 11.872 14.1736C12.2096 13.836 12.3992 13.3782 12.3992 12.9008V3.90078C12.6379 3.90078 12.8668 3.80596 13.0356 3.63718C13.2044 3.46839 13.2992 3.23948 13.2992 3.00078C13.2992 2.76209 13.2044 2.53317 13.0356 2.36439C12.8668 2.1956 12.6379 2.10078 12.3992 2.10078H9.35542L8.70382 0.798481C8.62913 0.649009 8.5143 0.523281 8.37219 0.435378C8.23009 0.347476 8.06631 0.30087 7.89922 0.300781H6.09922ZM4.29922 5.70078C4.29922 5.46209 4.39404 5.23317 4.56282 5.06439C4.73161 4.8956 4.96052 4.80078 5.19922 4.80078C5.43791 4.80078 5.66683 4.8956 5.83561 5.06439C6.0044 5.23317 6.09922 5.46209 6.09922 5.70078V11.1008C6.09922 11.3395 6.0044 11.5684 5.83561 11.7372C5.66683 11.906 5.43791 12.0008 5.19922 12.0008C4.96052 12.0008 4.73161 11.906 4.56282 11.7372C4.39404 11.5684 4.29922 11.3395 4.29922 11.1008V5.70078ZM8.79922 4.80078C8.56052 4.80078 8.33161 4.8956 8.16282 5.06439C7.99404 5.23317 7.89922 5.46209 7.89922 5.70078V11.1008C7.89922 11.3395 7.99404 11.5684 8.16282 11.7372C8.33161 11.906 8.56052 12.0008 8.79922 12.0008C9.03791 12.0008 9.26683 11.906 9.43561 11.7372C9.6044 11.5684 9.69922 11.3395 9.69922 11.1008V5.70078C9.69922 5.46209 9.6044 5.23317 9.43561 5.06439C9.26683 4.8956 9.03791 4.80078 8.79922 4.80078Z")
                                        div(id="createRoleModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full")
                                            div(class="relative p-4 w-full max-w-2xl max-h-full")
                                                div(class="relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5")
                                                    div(class="flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600")
                                                        h3(class="text-lg font-semibold text-gray-900 dark:text-white") Nuevo rol
                                                        button(type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-target="createRoleModal" data-modal-toggle="createRoleModal")
                                                            svg(aria-hidden="true" class="w-5 h-5" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg")
                                                                path(fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd")
                                                            span(class="sr-only") Close
                                                    form(name='createRoleModalForm' id='create-form' class='md:space-y-6' action='/api/v1/roles/' method='POST' enctype='multipart/form-data' autocomplete="off")
                                                        div(class="grid gap-4 mb-4 sm:grid-cols-2")
                                                            div
                                                                label(for="role_name" class='block mb-2 text-sm font-medium text-gray-900 dark:text-white') Nombre
                                                                input(type="text" name="role_name" id="role_name" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-sky-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-sky-500 dark:focus:border-primary-500" placeholder="")
                                                            div
                                                                label(for="role_description" class='block mb-2 text-sm font-medium text-gray-900 dark:text-white') Descripción o Área de trabajo
                                                                input(type="text" name="role_description" id="role_description" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-sky-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-sky-500 dark:focus:border-primary-500" placeholder="Jefe de Sistemas, Administrador, etc.")
                                                            
                                                            div(class="sm:col-span-2 items-center text-center")
                                                                button(type="submit" class="text-white inline-flex items-center bg-sky-500 hover:bg-sky-800 focus:ring-4 focus:outline-none focus:ring-sky-300 font-medium rounded-lg text-sm px-10 py-2.5 text-center dark:bg-sky-600 dark:hover:bg-sky-500 dark:focus:ring-sky-800")
                                                                    svg(class="mr-1 -ml-1 w-6 h-6" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg")
                                                                        path(fill-rule="evenodd", d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z", clip-rule="evenodd")
                                                                    | Agregar categoría
                                        div(id="updateRoleModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full")
                                            div(class="relative p-4 w-full max-w-2xl max-h-full")
                                                div(class="relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5")
                                                    div(class="flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:dark-border-gray-600")
                                                        h3(class="text-lg font-semibold text-gray-900 dark:text-white") Actualizar usuario
                                                        button(type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="updateRoleModal")
                                                            svg(aria-hidden="true" class="w-5 h-5" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg")
                                                                path(fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd")
                                                            span(class="sr-only") Close
                                                    form(name="updateRoleModalForm" id="update-form" action="/api/v1/roles/" method="PUT" enctype="multipart/form-data")
                                                        div(class="grid gap-4 mb-4 sm:grid-cols-2" id="userUpdateId")
                                                            div
                                                                label(for="updateRoleName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white") Nombre
                                                                input(type="text" name="updateRoleName" id="updateRoleName" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-sky-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-sky-500 dark:focus:border-primary-500")
                                                            div
                                                                label(for="updateRoleDescription" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white") Descripción o Área de trabajo
                                                                input(type="text" name="updateRoleDescription" id="updateRoleDescription" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-sky-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-sky-500 dark:focus:border-primary-500")
                                                            div(class="sm:col-span-2")
                                                                label(for="updateRolePermissions" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white") Permisos
                                                                input(name="input" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-sky-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-sky-500 dark:focus:border-primary-500" placeholder="Permisos" value='')
                                                            div(class="flex items-center space-x-4")
                                                                button(type="submit" class="text-white bg-sky-500 hover:bg-sky-800 focus:ring-4 focus:outline-none focus:ring-sky-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-sky-600 dark:hover:bg-sky-500 dark:focus:ring-sky-800") Actualizar
                                        div(id="deleteModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full")
                                            div(class="relative p-4 w-full max-w-md max-h-full")
                                                div(class="relative p-4 text-center bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5")
                                                    button(type="button" class="text-gray-400 absolute top-2.5 right-2.5 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="deleteModal")
                                                        svg(aria-hidden="true" class="w-5 h-5" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg")
                                                            path(fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd")
                                                        span(class="sr-only") Close
                                                    svg(class="text-gray-400 dark:text-gray-500 w-11 h-11 mb-3.5 mx-auto" aria-hidden="true" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg")
                                                        path(fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd")
                                                    p(id="showId" class="mb-4 text-gray-500 dark:text-gray-300") ¿Estás seguro de borrar esta capa? Esta acción no se puede deshacer.
                                                    div(class="flex justify-center items-center space-x-4")
                                                        button(data-modal-toggle="deleteModal" type="button" class="py-2 px-3 text-sm font-medium text-gray-500 bg-white rounded-lg border border-gray-200 hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-sky-300 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-sky-800")
                                                            | Cancel
                                                        button(type="submit" id="confirmDelete" class="py-2 px-3 text-sm font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-900") Sí, borrar
        include ../includes/footer.jade

        script.
            // Receive the JSON data from API get response from server side (roles)
            const roles = !{JSON.stringify(roles)};

            $(document).ready(function(){
                const table = new DataTable('#rolesTable', {
                    responsive: true,
                    pageLength: 20,
                    lengthMenu: [ [20, 40, 60, 100, -1], [20, 40, 60, 100, "All"] ],
                    scrollX: true,
                    scrollY: true,
                    scrollCollapse: true,
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json',
                    },
                    columnDefs: [ { className: "dt-center", "targets": "_all" } ],
                });

                // Add single row selection to the table
                $('#rolesTable tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    } else {
                        table.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                });
            })

            document.addEventListener('DOMContentLoaded', function() {
                const createForm = document.getElementById('create-form');
                const updateForm = document.getElementById('update-form');
                const deleteModal = document.getElementById('deleteModal');

                // Create a new role
                createForm.addEventListener('submit', async function (event){
                    event.preventDefault();

                    try {
                        const role_name = document.getElementById('role_name').value;
                        const role_description = document.getElementById('role_description').value;

                        const body = {
                            role_name: role_name,
                            role_description: role_description,
                        }

                        const response = await fetch('/api/v1/roles/', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': '!{cookies.token}',
                            },
                            body: JSON.stringify(body)
                        });

                        const data = await response.json();

                        if(response.status === 400){
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: data.message,
                            });
                        }
                        else if(response.ok){
                            Swal.fire({
                                icon: 'success',
                                title: '¡Éxito!',
                                text: 'Categoría creada correctamente.',
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.reload();
                                }
                            });
                        }
                        else {
                            throw new Error(data.message);
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message,
                        });
                    }
                });

                $(document).on("click", "#updateModalButton", function() {
                    const roleId = $(this).val();
                    const roleName = $(this).closest("tr").find("#roleName").attr("value");
                    const roleDescription = $(this).closest("tr").find("#roleDescription").attr("value");
                    // Get the input for tagify and set the value to the permissions
                    const rolePermissions = document.querySelector('input[name=input]');

                    // Set the actual permission of the roleId to the input rolePermissions
                    // First fetch the permissions of the roleId
                    fetch(`/api/v1/permissions/role/${roleId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': '!{cookies.token}',
                        },
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        //- rolePermissions.id = data.map(permission => permission.id).join(', ');
                        rolePermissions.value = data.map(permission => permission.perm_description).join(', ');
                    })

                    // Make API fetch call to get role permissions based on roleId
                    fetch(`/api/v1/permissions/all`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': '!{cookies.token}',
                        },
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);

                        // Set the whitelist of permissions using the data from the API
                        const whitelist = [];
                        data.forEach(permission => {
                            const whitelistItem = {
                                id: permission.id,
                                value: permission.id, // Assign the perm_description to the value property
                                name: permission.perm_description,
                            };
                            whitelist.push(whitelistItem);
                        });

                        console.log(whitelist);

                        function tagTemplate(tagData) {
                            return `
                                <div ${this.getAttributes(tagData)} class="tagify__dropdown__item">
                                    <button class="tagify__dropdown__item__title text-gray-800">${tagData.name}</button>
                                </div>
                            `;
                        }

                        // Initialize tagify
                        var tagify = new Tagify(rolePermissions, {
                            tagTextProp: 'name',
                            enforceWhitelist: true,
                            skipInvalid: true,
                            dropdown: {
                                closeOnSelect: false,
                                enabled: 0,
                                classname: 'tags-look',
                                searchKeys: ['name'],
                            },
                            templates: {
                                dropdownItem: tagTemplate,
                            },
                            whitelist: whitelist,
                        });

                        // Chainable event listeners
                        tagify.on('add', onAddTag)
                        .on('remove', onRemoveTag)
                        .on('input', onInput)
                        .on('edit', onTagEdit)
                        .on('invalid', onInvalidTag)
                        .on('click', onTagClick)
                        .on('focus', onTagifyFocusBlur)
                        .on('blur', onTagifyFocusBlur)
                        .on('dropdown:hide dropdown:show', e => console.log(e.type))
                        .on('dropdown:select', onDropdownSelect)

                        var mockAjax = (function mockAjax(){
                            var timeout;
                            return function(duration){
                                clearTimeout(timeout); // abort last request
                                return new Promise(function(resolve, reject){
                                    timeout = setTimeout(resolve, duration || 700, whitelist)
                                })
                            }
                        })()

                        // tag added callback
                        function onAddTag(e){
                            console.log("onAddTag: ", e.detail);
                            console.log("original input value: ", rolePermissions.value)
                            tagify.off('add', onAddTag) // example of removing a custom Tagify event
                        }

                        // tag removed callback
                        function onRemoveTag(e){
                            console.log("onRemoveTag:", e.detail, "tagify instance value:", tagify.value)
                        }

                        // on character(s) added/removed (user is typing/deleting)
                        function onInput(e){
                            console.log("onInput: ", e.detail);
                            tagify.whitelist = null; // reset current whitelist
                            tagify.loading(true) // show the loader animation

                            // get new whitelist from a delayed mocked request (Promise)
                            mockAjax()
                                .then(function(result){
                                    tagify.settings.whitelist = result.concat(tagify.value) // add already-existing tags to the new whitelist array

                                    tagify
                                        .loading(false)
                                        // render the suggestions dropdown.
                                        .dropdown.show(e.detail.value);
                                })
                                .catch(err => tagify.dropdown.hide())
                        }

                        function onTagEdit(e){
                            console.log("onTagEdit: ", e.detail);
                        }

                        // invalid tag added callback
                        function onInvalidTag(e){
                            console.log("onInvalidTag: ", e.detail);
                        }

                        // invalid tag added callback
                        function onTagClick(e){
                            console.log(e.detail);
                            console.log("onTagClick: ", e.detail);
                        }

                        function onTagifyFocusBlur(e){
                            console.log(e.type, "event fired")
                        }

                        function onDropdownSelect(e){
                            console.log("onDropdownSelect: ", e.detail)
                            var tagData = e.detail.data;
                            tagify.addTags([tagData]);
                        }

                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire("Error", error.message, "error");
                    });

                    $("#updateRoleName").val(roleName);
                    $("#updateRoleDescription").val(roleDescription);

                    updateForm.addEventListener('submit', async function (event) {
                        event.preventDefault();

                        try {
                            const role_name = document.getElementById('updateRoleName').value;
                            const role_description = document.getElementById('updateRoleDescription').value;
                            const permissions = document.querySelector('input[name=input]').value;
                            console.log(permissions);
                            if(permissions.length === 0){
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Debes seleccionar al menos un permiso.',
                                });
                                return;
                            }
                            const jsonPermissions = JSON.parse(permissions);
                            console.log(jsonPermissions);
                            // Foreach permission, get the value and push it to the permissions array
                            const permissionsA = [];
                            jsonPermissions.forEach(permission => {
                                permissionsA.push(permission.value);
                            });
                            console.log(permissionsA);

                            const body = {
                                role_name: role_name,
                                role_description: role_description,
                                permissions: permissionsA,
                            }

                            const response = await fetch(`/api/v1/roles/${roleId}`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': '!{cookies.token}',
                                },
                                body: JSON.stringify(body)
                            });

                            const data = await response.json();

                            const response2 = await fetch(`/api/v1/roles/permissions/${roleId}`,{
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': '!{cookies.token}',
                                },
                                body: JSON.stringify({permissions: permissionsA})
                            });

                            const data2 = await response2.json();

                            if(response.status === 400 || response2.status === 400 || response2.success === false){
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: data.message,
                                });
                            }
                            else if(response.ok && response2.ok){
                                Swal.fire({
                                    icon: 'success',
                                    title: '¡Éxito!',
                                    text: 'Categoría actualizada correctamente.',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.reload();
                                    }
                                });
                            }
                            else {
                                throw new Error(data.message);
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: error.message,
                            });
                        }
                    })
                });

                // Delete a role
                $(document).on("click", "#deleteModalButton", function() {
                    const roleId = $(this).val();
                    $("#confirmDelete").val(roleId);

                    $("#confirmDelete").on("click", async function() {
                        try {
                            const response = await fetch(`/api/v1/roles/${roleId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': '!{cookies.token}',
                                },
                            });

                            const data = await response.json();
                            if (response.ok) {
                                Swal.fire({
                                    title: "Eliminado",
                                    text: "Categoria eliminada correctamente.",
                                    icon: "success",
                                    showConfirmButton: true,
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                throw new Error(data.message);
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            Swal.fire("Error", error.message, "error");
                        }
                    });
                })
            })