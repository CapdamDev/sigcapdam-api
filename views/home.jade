doctype html
html(lang='es')
    head
        block content
            title SIGCAPDAM - Capas !{token}
        include ./includes/head.jade
    body(class='bg-white dark:bg-gray-900')
        include ./includes/sidebar.jade
        block content
        main.ml-auto(class='w-[calc(100%-3.73rem)]')
            div(class='2xl:w-auto mx-auto space-y-6')
                div(class="h-16 items-center border-b border-gray-700 flex justify-between px-6 lg:px-12")
                    //- Coordenadas del mouse
                    div(class='flex items-center')
                        span(class='text-gray-500 dark:text-gray-200') Coordenadas del mouse:
                        span#mouse-position.text-gray-500(class='dark:text-gray-200 ml-2')

                div(class='px-6 2xl:h-[calc(55rem)] xl:h-[calc(50rem)] lg:h-[calc(45rem)] md:h-[calc(40rem)] sm:h-[calc(35rem)] h-[calc(43rem)]')
                    #map(class='h-full flex flex-row justify-center items-center border border-dashed border-gray-300/40 dark:border-gray-700')
                    
                div(class='absolute top-32 right-1 transform translate-y-[-50%] px-6 py-4')
                        button(class='w-8 h-8 text-white bg-gray-900 border-0 py-2 focus:outline-none hover:bg-gray-600 rounded text-xs' onclick='toggleRightPanel()')
                            i(class='fas fa-eye-slash' id='rightPanelIcon')

                    div(class='absolute top-1/2 right-1 transform translate-y-[-50%] px-6 py-4' id='right-panel')
                    
                        //- Select to change the map type
                        div.flex.w-full.text-white.border-0.py-2.text-center.items-center(class='dark:text-white dark:bg-gray-800 focus:outline-none')
                            span.mx-auto Tipo de mapa

                        div(class='flex justify-center items-center dark:bg-white bg-gray-900 border-0 py-2')
                            select(id='map-type' class='w-60 h-8 text-white bg-gray-900 border-0 py-2 pl-4 focus:outline-none hover:bg-gray-600 rounded text-xs')
                                option(value='Hybrid') Hybrid
                                option(value='OSM') OpenStreetMap
                                option(value='Roadmap') Roadmap
                                option(value='Terrain') Terrain
                                option(value='AlteredRoadmap') Altered Roadmap
                                option(value='SatelliteOnly') Satellite Only

                        div.flex.w-full.text-white.border-0.py-2.text-center.items-center(class='dark:text-white dark:bg-gray-800 focus:outline-none')
                            span.mx-auto BUSCAR PREDIO POR
                        div(class='w-auto h-auto dark:bg-white bg-gray-900 border-0 py-2 flex justify-center')

                            div(class="flex items-center me-4 ml-2")
                                input(id="inline-radio" type="radio" value="" name="inline-radio-group" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" onclick='showContainer("contenedor_clavecatastro");' checked)
                                label(for="inline-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-black") Clave Catastral
                            div(class="flex items-center me-4")
                                input(id="inline-2-radio" type="radio" value="" name="inline-radio-group" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" onclick='showContainer("contenedor_contrato");')
                                label(for="inline-2-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-black") Contrato de Agua
                        form(role='search')
                            div(class='flex justify-center items-center dark:bg-white bg-gray-900 border-0 py-2' id='contenedor_clavecatastro')
                                div(class='p-[0.2rem]')
                                    label(for='mun' class='block text-center text-white dark:text-black text-xs') Mun.:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='2' id='mun')
                                div(class='p-[0.2rem]')
                                    label(for='local' class='block text-center text-white dark:text-black text-xs') Local:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='2' id='local')
                                div(class='p-[0.2rem]')
                                    label(for='zona' class='block text-center text-white dark:text-black text-xs') Zona:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='2' id='zona')
                                div(class='p-[0.2rem]')
                                    label(for='manza.' class='block text-center text-white dark:text-black text-xs') Manza.:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='3' id='manza')
                                div(class='p-[0.2rem]')
                                    label(for='predio:' class='block text-center text-white dark:text-black text-xs') Predio:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='3' id='predio')
                                div(class='p-[0.2rem]')
                                    label(for='subpredio:' class='block text-center text-white dark:text-black text-xs') Subpred:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='3' id='subpredio')


                            div(class='justify-center items-center dark:bg-white bg-gray-900 border-0 py-2 hidden' id='contenedor_contrato')
                                div(class='items-center justify-center text-center w-full border-0')
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1' placeholder='No. Contrato' id='contratoAgua')
                            
                            //- Button to send the form and submit to search the claveCatastral or contrato 07 20 04 022 003 000
                            div(class='flex justify-center items-center dark:bg-white bg-gray-900 border-0 py-2')
                                button(class='w-60 h-8 text-white bg-gray-900 border-0 py-2 focus:outline-none hover:bg-gray-600 rounded text-xs' onclick='buscarDomicilio()') Buscar

                        input#search(type='text' class='w-full h-full text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 text-center' placeholder='Buscar capas')
                        div#jstree(style='max-height: 300px;' class='flex w-full bg-white py-2 overflow-y-auto')

                        include ./includes/footer.jade
                        script.

                            // Coordenadas que centrarán el mapa al cargar la página
                            var centerCoordinates = [-104.3470, 19.1149];
                            var token = sessionStorage.getItem('token');

                            const AllTiles = {
                                OSM: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                                Roadmap: 'http://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}',
                                Terrain: 'http://mt0.google.com/vt/lyrs=p&hl=en&x={x}&y={y}&z={z}',
                                AlteredRoadmap: 'http://mt0.google.com/vt/lyrs=r&hl=en&x={x}&y={y}&z={z}',
                                SatelliteOnly: 'http://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}',
                                Hybrid: 'http://mt0.google.com/vt/lyrs=y&hl=en&x={x}&y={y}&z={z}',
                            }

                            const initialLayer = 'Hybrid';
                            const initialSource = new ol.source.XYZ({
                                url: AllTiles[initialLayer],
                                crossOrigin: 'Anonymous',
                            });

                            // Crear el mapa
                            var map = new ol.Map({
                                target: 'map',
                                layers: [
                                    new ol.layer.Tile({
                                        source: initialSource,
                                    })
                                ],
                                view: new ol.View({
                                    center: ol.proj.fromLonLat(centerCoordinates),
                                    zoom: 18,
                                    //- maxZoom: 18,
                                    //- minZoom: 16.5,
                                })
                            });

                            const mapTypeSelector = document.getElementById('map-type');
                            mapTypeSelector.addEventListener('change', function () {
                                const selectedLayer = mapTypeSelector.value;
                                const selectedSource = new ol.source.XYZ({
                                    url: AllTiles[selectedLayer],
                                    crossOrigin: 'Anonymous',
                                });
                                map.getLayers().setAt(0, new ol.layer.Tile({
                                    source: selectedSource,
                                }));
                            });

                            const tileLayer = map.getLayers().item(0);
                            tileLayer.setSource(initialSource);

                            // Ver las coordenadas del mouse en el mapa
                            var mousePositionControl = new ol.control.MousePosition({
                                coordinateFormat: ol.coordinate.createStringXY(4),
                                projection: 'EPSG:4326',
                                className: 'custom-mouse-position',
                                target: document.getElementById('mouse-position'),
                                undefinedHTML: '&nbsp;'
                            });

                            map.addControl(mousePositionControl);

                            // Script para buscar por clave catastral //
                            function buscarDomicilio() {
                                event.preventDefault();
                                var mun = document.getElementById("mun").value;
                                var local = document.getElementById("local").value;
                                var zona = document.getElementById("zona").value;
                                var manza = document.getElementById("manza").value;
                                var predio = document.getElementById("predio").value;
                                var subpredio = document.getElementById("subpredio").value;
                                var claveCatastral = mun + local + zona + manza + predio + subpredio;
                                var contratoAgua = document.getElementById("contratoAgua").value;

                                if (claveCatastral != "" && claveCatastral.length < 15) {
                                    // Make a sweet alert message
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: 'La clave catastral debe tener 15 dígitos',
                                    })
                                }

                                // Only when ClaveCatastral is available and has 15 digits, if not, don't do anything
                                else if (claveCatastral != "" && claveCatastral >= 15) {

                                    // Clear existing vector layers and popups
                                    map.getLayers().forEach(layer => {
                                        if (layer instanceof ol.layer.Vector) {
                                            map.removeLayer(layer);
                                        }
                                    });
                                    map.getOverlays().clear();

                                    fetch(`https://corsproxy.io/?https://digecat.manzanillo.gob.mx/index.php/Exteriror/mapa_clave_catastro_simple_detalles?do1=${claveCatastral}`)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Network response was not ok: ${response.statusText}`);
                                        }
                                        return response.json()
                                        .then(data2 => {
                                            if (data2 === undefined || data2 === null || data2 === "") {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Sin datos',
                                                    text: 'No se encontró información sobre la clave catastral proporcionada, el polígono no existe en la base de datos del Ayuntamiento de Manzanillo',
                                                });
                                            }
                                            return data2;
                                        });
                                    })
                                    .then(data1 => {
                                        var poligono_testo = data1[0].poligono[0].poligono_testo;
                                        console.log("<-------- Datos de la API del Ayuntamiento -------->")
                                        console.log(data1);
                                        if(poligono_testo == null || poligono_testo == "" || poligono_testo == undefined){
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Oops...',
                                                text: 'No se encontró la clave catastral',
                                            })
                                        }

                                        // Extract the coordinates from poligono_testo
                                        const polygonStr = poligono_testo;
                                        const coordinates = polygonStr.match(/-?\d+\.\d+/g);
                                        const parsedCoordinates = coordinates.map(coord => parseFloat(coord));

                                        // Create an array of coordinate pairs from the flat array
                                        const coordinatePairs = [];
                                        for (let i = 0; i < parsedCoordinates.length; i += 2) {
                                            coordinatePairs.push([parsedCoordinates[i], parsedCoordinates[i + 1]]);
                                        }

                                        // Transform coordinates from EPSG:4326 to the map's projection
                                        const transformedCoordinates = coordinatePairs.map(coord => ol.proj.transform(coord, 'EPSG:4326', map.getView().getProjection()));

                                        // Show the polygon on the map
                                        var polygon = new ol.geom.Polygon([transformedCoordinates]);
                                        var feature = new ol.Feature(polygon);
                                        var vectorSource = new ol.source.Vector({
                                            features: [feature]
                                        });
                                        var vectorLayer = new ol.layer.Vector({
                                            source: vectorSource,
                                            style: new ol.style.Style({
                                                stroke: new ol.style.Stroke({
                                                    color: 'rgba(255, 0, 0, 0.5)',
                                                    width: 4
                                                }),
                                                fill: new ol.style.Fill({
                                                    color: 'rgba(255, 0, 0, 0.2)'
                                                })
                                            })
                                        });
                                        map.addLayer(vectorLayer);

                                        // Go to the transformed coordinates with a specific zoom level
                                        map.getView().fit(polygon, { size: map.getSize(), padding: [50, 50, 50, 50], maxZoom: 20 });

                                        // https://pagos.capdam.gob.mx/connections/api.php?CveCat=072004022003000
                                        // Get the data from the API using the data[0].clavecat
                                        fetch(`https://pagos.capdam.gob.mx/connections/api.php?CveCat=${data1[0].clavecat}`)
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error(`Network response was not ok: ${response.statusText}`);
                                            }
                                            return response.json();
                                        })
                                        // Save the response from pagos API in data2
                                        .then(data2 => {
                                            console.log("<-------- Datos de la API de CAPDAM -------->")
                                            console.log(data2);

                                            // Show the popup
                                            var popup = new ol.Overlay.Popup();
                                            map.addOverlay(popup);

                                            if(data2.bimestral[0].Drenaje === '1'){
                                                data2.bimestral[0].Drenaje = 'SI';
                                            }
                                            else if(data2.bimestral[0].Drenaje === '0' || data2.bimestral[0].Drenaje === '' || data2.bimestral[0].Drenaje === null || data2.bimestral[0].Drenaje === undefined){
                                                data2.bimestral[0].Drenaje = 'NO';
                                            }

                                            // Format data2[0].valtotal to MXN currency
                                            var formatter = new Intl.NumberFormat('es-MX', {
                                                style: 'currency',
                                                currency: 'MXN',
                                            });
                                            data1[0].valtotal = formatter.format(data1[0].valtotal);
                                            data1[0].total_esperado_anual_anterior = formatter.format(data1[0].total_esperado_anual_anterior);

                                            popup.show(transformedCoordinates[0], 
                                            '<div class="text-center">\
                                                <h1 class="text-2xl font-bold">Información del domicilio</h1>\
                                                <h2 class="text-1xl font-bold">---------- Dirección general de Catastro Manzanillo ----------</h2>\
                                                <p class="text-sm">Clave catastral: ' + data1[0].clavecat2 + '</p>\
                                                <p class="text-sm">Fecha de registro: ' + data1[0].fechaa + '</p>\
                                                <p class="text-sm">Tarjeta: ' + data1[0].tarjeta + '</p>\
                                                <p class="text-sm">Última actualización: ' + data1[0].fechamod + '</p>\
                                                <p class="text-sm">Predial sin multas: ' + data1[0].total_esperado_anual_anterior + '</p>\
                                                <p class="text-sm">Año pagado: ' + data1[0].pr_uejep + '</p>\
                                                <p class="text-sm">Bimestre pagado: ' + data1[0].pr_bimp + '</p>\
                                                <h2 class="text-1xl font-bold">---------- Nomenclatura ----------</h2>\
                                                <p class="text-sm">Dirección: ' + data1[0].calle +', '+ data2.bimestral[0].Colonia +'</p>\
                                                <p class="text-sm">Uso: ' + data1[0].uso_propiedad + '</p>\
                                                <h2 class="text-1xl font-bold">---------- Superficies ----------</h2>\
                                                <p class="text-sm">Terreno: '+ data1[0].supterr +' m²</p>\
                                                <p class="text-sm">Construcción: '+ data1[0].supcon +' m²</p>\
                                                <p class="text-sm">Valor cat.: '+ data1[0].valtotal +'</p>\
                                                <h2 class="text-1xl font-bold">---------- Datos CAPDAM ----------</h2>\
                                                <p class="text-sm">Contrato: '+ data2.bimestral[0].numcontrato +'</p>\
                                                <p class="text-sm">Usuario: '+ data2.bimestral[0].NombreUsuario +'</p>\
                                                <p class="text-sm">Cuenta: '+ data2.bimestral[0].Medidor +'</p>\
                                                <p class="text-sm">Nombre: '+ data2.bimestral[0].StatusToma +'</p>\
                                                <p class="text-sm">Drenaje: '+ data2.bimestral[0].Drenaje +'</p>\
                                                <p class="text-sm">Tarifa: '+ data2.bimestral[0].Tarifa +'</p>\
                                            </div>');
                                        })

                                        // Clean variables
                                        mun, local, zona, manza, predio, subpredio = "";
                                        contratoAgua = "";

                                    })
                                    .catch(error => {
                                        console.error('Error during fetch:', error);
                                    });
                                }

                                else if(contratoAgua != ""){

                                    // If contratoAgua is 0, don't do anything
                                    if(contratoAgua == 0){
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Oops...',
                                            text: 'El número de contrato no puede ser 0',
                                        })
                                    }
                                    
                                    // Clear existing vector layers and popups
                                    map.getLayers().forEach(layer => {
                                        if (layer instanceof ol.layer.Vector) {
                                            map.removeLayer(layer);
                                        }
                                    });
                                    map.getOverlays().clear();

                                    fetch(`https://pagos.capdam.gob.mx/connections/api.php?Contrato=${contratoAgua}`)

                                    // Now we make an inverse search, we get the data from the API using the contratoAgua
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Network response was not ok: ${response.statusText}`);
                                        }
                                        else if(response.status === 500 || response.status === 404){
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Error',
                                                text: 'No se encontró información sobre el contrato proporcionado',
                                            });
                                        }
                                        return response.json();
                                    })
                                    .then(data1 => {

                                        console.log("<-------- Datos de la API de CAPDAM -------->")
                                        console.log(data1);

                                        // Now we get the data from the API using the data1.bimestral[0].CveCat
                                        fetch(`https://corsproxy.io/?https://digecat.manzanillo.gob.mx/index.php/Exteriror/mapa_clave_catastro_simple_detalles?do1=${data1.bimestral[0].CveCat}`)
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error(`Network response was not ok: ${response.statusText}`);
                                            }
                                            return response.json();
                                        })
                                        .then(data2 => {
                                            console.log("<-------- Datos de la API del Ayuntamiento -------->")
                                            console.log(data2);

                                            // If data2 is an empty array or empty object, show a sweet alert message
                                            if(data2 === undefined || data2 === null || data2 === "" || data2 === {}){
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Sin datos',
                                                    text: 'No se encontró información sobre la clave catastral proporcionada, el polígono no existe en la base de datos del Ayuntamiento de Manzanillo',
                                                });
                                                return; // Stop code execution here
                                            }

                                            // Extract the coordinates from data2[0].poligono[0].poligono_testo
                                            const polygonStr = data2[0].poligono[0].poligono_testo;
                                            const coordinates = polygonStr.match(/-?\d+\.\d+/g);
                                            const parsedCoordinates = coordinates.map(coord => parseFloat(coord));

                                            // Create an array of coordinate pairs from the flat array
                                            const coordinatePairs = [];
                                            for (let i = 0; i < parsedCoordinates.length; i += 2) {
                                                coordinatePairs.push([parsedCoordinates[i], parsedCoordinates[i + 1]]);
                                            }

                                            // Transform coordinates from EPSG:4326 to the map's projection
                                            const transformedCoordinates = coordinatePairs.map(coord => ol.proj.transform(coord, 'EPSG:4326', map.getView().getProjection()));

                                            // Show the polygon on the map
                                            var polygon = new ol.geom.Polygon([transformedCoordinates]);
                                            var feature = new ol.Feature(polygon);
                                            var vectorSource = new ol.source.Vector({
                                                features: [feature]
                                            });
                                            var vectorLayer = new ol.layer.Vector({
                                                source: vectorSource,
                                                style: new ol.style.Style({
                                                    stroke: new ol.style.Stroke({
                                                        color: 'rgba(255, 0, 0, 0.5)',
                                                        width: 4
                                                    }),
                                                    fill: new ol.style.Fill({
                                                        color: 'rgba(255, 0, 0, 0.2)'
                                                    })
                                                })
                                            });

                                            map.addLayer(vectorLayer);

                                            // Go to the transformed coordinates with a specific zoom level
                                            map.getView().fit(polygon, { size: map.getSize(), padding: [50, 50, 50, 50], maxZoom: 20 });

                                            // Show the popup
                                            var popup = new ol.Overlay.Popup();
                                            map.addOverlay(popup);

                                            if(data1.bimestral[0].Drenaje === '1'){
                                                data1.bimestral[0].Drenaje = 'SI';
                                            }
                                            else if(data1.bimestral[0].Drenaje === '0' || data1.bimestral[0].Drenaje === '' || data1.bimestral[0].Drenaje === null || data1.bimestral[0].Drenaje === undefined){
                                                data1.bimestral[0].Drenaje = 'NO';
                                            }

                                            // Format data2[0].valtotal to MXN currency
                                            var formatter = new Intl.NumberFormat('es-MX', {
                                                style: 'currency',
                                                currency: 'MXN',
                                            });
                                            data2[0].valtotal = formatter.format(data2[0].valtotal);
                                            data2[0].total_esperado_anual_anterior = formatter.format(data2[0].total_esperado_anual_anterior);

                                            popup.show(transformedCoordinates[0],
                                            '<div class="text-center">\
                                                <h1 class="text-2xl font-bold">Información del domicilio</h1>\
                                                <h2 class="text-1xl font-bold">---------- Dirección general de Catastro Manzanillo ----------</h2>\
                                                <p class="text-sm">Clave catastral: ' + data2[0].clavecat2 + '</p>\
                                                <p class="text-sm">Fecha de registro: ' + data2[0].fechaa + '</p>\
                                                <p class="text-sm">Tarjeta: ' + data2[0].tarjeta + '</p>\
                                                <p class="text-sm">Última actualización: ' + data2[0].fechamod + '</p>\
                                                <p class="text-sm">Predial sin multas: ' + data2[0].total_esperado_anual_anterior + '</p>\
                                                <p class="text-sm">Año pagado: ' + data2[0].pr_uejep + '</p>\
                                                <p class="text-sm">Bimestre pagado: ' + data2[0].pr_bimp + '</p>\
                                                <h2 class="text-1xl font-bold">---------- Nomenclatura ----------</h2>\
                                                <p class="text-sm">Dirección: ' + data2[0].calle +', ' + data1.bimestral[0].Colonia +'</p>\
                                                <p class="text-sm">Uso: ' + data2[0].uso_propiedad + '</p>\
                                                <h2 class="text-1xl font-bold">---------- Superficies ----------</h2>\
                                                <p class="text-sm">Terreno: '+ data2[0].supterr +' m²</p>\
                                                <p class="text-sm">Construcción: '+ data2[0].supcon +' m²</p>\
                                                <p class="text-sm">Valor cat.: '+ data2[0].valtotal +'</p>\
                                                <h2 class="text-1xl font-bold">---------- Datos CAPDAM ----------</h2>\
                                                <p class="text-sm">Contrato: '+ data1.bimestral[0].numcontrato +'</p>\
                                                <p class="text-sm">Usuario: '+ data1.bimestral[0].NombreUsuario +'</p>\
                                                <p class="text-sm">Cuenta: '+ data1.bimestral[0].Medidor +'</p>\
                                                <p class="text-sm">Nombre: '+ data1.bimestral[0].StatusToma +'</p>\
                                                <p class="text-sm">Drenaje: '+ data1.bimestral[0].Drenaje +'</p>\
                                                <p class="text-sm">Tarifa: '+ data1.bimestral[0].Tarifa +'</p>\
                                            </div>');
                                            

                                            // And clean variables
                                            mun, local, zona, manza, predio, subpredio = "";
                                            contratoAgua = "";

                                        })
                                    })
                                    .catch(error => {
                                        console.error('Error during fetch:', error);
                                    });
                                }
                            }

                            // Script para la barra de buscar del jstree //
                            $(document).ready(function(){
                                $("#search").on("keyup", function() {
                                    var value = $(this).val().toLowerCase();
                                    $("#jstree li").filter(function() {
                                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                                    });
                                });
                            })

                            document.addEventListener('DOMContentLoaded', function () {

                                // Obtener todos polígonos de la base de datos
                                fetch('/api/v1/categories/all', {
                                    method: 'GET',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Authorization': '!{cookies.token}',
                                    },
                                })
                                .then((response)=> {
                                    if(response.status === 401) {
                                        Swal.fire({
                                            title: 'Error',
                                            text: 'Vuelve a iniciar sesión',
                                            icon: 'error',
                                            confirmButtonText: 'Ok'
                                        })
                                        .then(()=> {
                                            fetch('api/v1/auth/logout', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                            })
                                            .then(response => {
                                                if(response.ok) {
                                                    window.location.href = '/';
                                                } else {
                                                    throw new Error('Logout failed');
                                                }
                                            })
                                        });
                                    }else {
                                        return response.json();
                                    }
                                })
                                .then((categories) => {
                                    // Now get the Layers from the API before creating the jstree
                                    fetch('/api/v1/layers/all', {
                                        method: 'GET',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'Authorization': '!{cookies.token}',
                                        },
                                    })
                                    .then((response)=> {
                                        if(response.status === 401) {
                                            Swal.fire({
                                                title: 'Error',
                                                text: 'Vuelve a iniciar sesión',
                                                icon: 'error',
                                                confirmButtonText: 'Ok'
                                            })
                                            .then(()=> {
                                                fetch('api/v1/auth/logout', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/json',
                                                    },
                                                })
                                                .then(response => {
                                                    if(response.ok) {
                                                        window.location.href = '/';
                                                    } else {
                                                        throw new Error('Logout failed');
                                                    }
                                                })
                                            });
                                        }else {
                                            return response.json();
                                        }
                                    })
                                    .then((layers) => {
                                        console.log("Categories are: ");
                                        console.log(categories);
                                        console.log("Layers are: ");
                                        console.log(layers);
                                            $('#jstree').jstree({
                                                'core' : {
                                                    'data' : categories.map(category => {
                                                        return {
                                                            text: category.name,
                                                            children: layers.filter(layer => layer.categoryId === category.id).map(layer => {
                                                                return {
                                                                    id: layer.id,
                                                                    text: '<img src="assets/layers/' + layer.icon + '" class="inline-block w-4 h-4"> ' + layer.name,
                                                                }
                                                            }),
                                                        }
                                                    }),
                                                    "themes": {
                                                        "theme": "default",
                                                        "icons": false,
                                                        "variant": "small",
                                                        "stripes": false,
                                                        "dots": false
                                                    },
                                                    },
                                                    "checkbox": {
                                                        "keep_selected_style": false
                                                    },
                                                    "plugins": ["checkbox", "themes", "search"],
                                                    "search": {
                                                        "case_sensitive": false,
                                                        "show_only_matches": true
                                                },
                                            }).on('changed.jstree', function (e, data) {
                                                console.log(data.selected);

                                                // Remove the parent nodes of data.selected array
                                                // Al parents start with j1_ and the children start with j2_
                                                var selectedNodes = data.selected.filter(node => !node.startsWith('j1_'));
                                                console.log(selectedNodes);
                                                
                                                selectedNodes = $('#jstree').jstree(true).get_selected();
                                                var selectedIds = selectedNodes.join(',');

                                                // Clear existing vector layers and popups
                                                map.getLayers().forEach(layer => {
                                                    if (layer instanceof ol.layer.Vector) {
                                                        map.removeLayer(layer);
                                                    }
                                                });

                                                // Get the polygons from the API where the layerId is equal 
                                                // to the selectedNodes id from the jstree
                                                fetch('/api/v1/polygons/' + selectedIds, {
                                                    method: 'GET',
                                                    headers: {
                                                        'Content-Type': 'application/json',
                                                        'Authorization': '!{cookies.token}',
                                                    },
                                                })
                                                .then(response => response.json()) // Parse the response as JSON
                                                .then((polygonsData) => {
                                                    console.log("<-------- PolygonsData -------->")
                                                    console.log(polygonsData);
                                                    //- const geometries = polygonsData.map(polygon => polygon.geometry);
                                                    //- console.log("<-------- Geometries -------->")
                                                    //- console.log(geometries);

                                                    // NOW WE HAVE NO ERRORS IN CONSOLE, BUT THE MAP IS NOT SHOWING THE POLYGONS,
                                                    // POINTS, ETC. FROM THE DATABASE
                                                    polygonsData.forEach(function (geometry) {
                                                        console.log(geometry.geometry);

                                                        var layerSource = new ol.source.Vector({
                                                            features: (new ol.format.GeoJSON()).readFeatures(geometry.geometry, {
                                                                dataProjection: 'EPSG:4326',
                                                                featureProjection: 'EPSG:3857',
                                                            }),
                                                        });

                                                        var iconStyleForLayer = new ol.style.Style({
                                                            image: new ol.style.Icon({
                                                                anchor: [0.5, 0.5],
                                                                anchorXUnits: 'fraction',
                                                                anchorYUnits: 'fraction',
                                                                src: 'assets/layers/' + geometry.layerData.icon,
                                                            }),
                                                        });

                                                        var vectorLayer = new ol.layer.Vector({
                                                            source: layerSource,
                                                            visible: false,
                                                            style: function(feature, resolution) {
                                                                if(feature.getGeometry().getType() === 'Point') {
                                                                    return iconStyleForLayer;
                                                                }
                                                            }
                                                        });

                                                        if(geometry.layerData.name){
                                                            vectorLayer.set('name', geometry.layerData.name);
                                                        } else{
                                                            vectorLayer.set('name', 'Capa sin nombre');
                                                        }

                                                        var iconStyle = new ol.style.Style({
                                                            image: new ol.style.Icon({
                                                                anchor: [0.5, 0.5],
                                                                anchorXUnits: 'fraction',
                                                                anchorYUnits: 'fraction',
                                                                src: 'assets/layers/' + geometry.layerData.icon,
                                                                scale: 0.1,
                                                            }),
                                                        });

                                                        map.addLayer(vectorLayer);

                                                    })


                                                    //- console.log("<-------- PolygonsData -------->")
                                                    //- polygonsData.forEach(polygon => {
                                                    //-     // Extract the coordinates from polygon.geometry
                                                    //-     const polygonStr = polygon.geometry;
                                                    //-     // Log the polygonStr
                                                    //-     console.log(polygonStr);
                                                    //- })                                                    
                                                });
                                            });
                                    })
                                    .catch((error) => {
                                        console.error('Error:', error);
                                    });
                                })
                            });

                            function showContainer(containerId) {
                                var contenedorClaveCatastro = document.getElementById("contenedor_clavecatastro");
                                var contenedorContrato = document.getElementById("contenedor_contrato");

                                if (containerId === "contenedor_clavecatastro") {
                                    contenedorClaveCatastro.classList.remove("hidden");
                                    contenedorContrato.classList.add("hidden");
                                    // Clear the input
                                    document.getElementById("contratoAgua").value = "";
                                } 
                                else if (containerId === "contenedor_contrato") {
                                    contenedorClaveCatastro.classList.add("hidden");
                                    contenedorContrato.classList.remove("hidden");
                                    // Clear the input
                                    document.getElementById("mun").value = "";
                                    document.getElementById("local").value = "";
                                    document.getElementById("zona").value = "";
                                    document.getElementById("manza").value = "";
                                    document.getElementById("predio").value = "";
                                    document.getElementById("subpredio").value = "";
                                }
                            }
                                
                            function toggleRightPanel() {
                                var rightPanel = document.getElementById('right-panel');
                                rightPanel.classList.toggle('hidden');

                                var rightPanelIcon = document.getElementById('rightPanelIcon');
                                rightPanelIcon.classList.toggle('fa-eye-slash');
                                rightPanelIcon.classList.toggle('fa-eye');
                            }
