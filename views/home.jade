doctype html
html(lang='es')
    head
        block content
            title SIGCAPDAM - Capas !{token}
        include ./includes/head.jade
    body(class='bg-white dark:bg-gray-900')
        include ./includes/sidebar.jade
        block content
        main.ml-auto(class='w-[calc(100%-3.73rem)]')
            div(class='2xl:w-auto mx-auto space-y-6')
                div(class='h-16 items-center border border-gray-300/40 dark:border-gray-700 flex justify-between px-6 lg:px-12')
                    //- Coordenadas del mouse
                    div(class='flex items-center')
                        span(class='text-gray-500 dark:text-gray-200') Coordenadas del mouse:
                        span#mouse-position.text-gray-500(class='dark:text-gray-200 ml-2')
                    if cookies.role_name === 'admin'
                        span(class='text-left text-white') SIGCAPDAM | Administrador
                    else if cookies.role_name === 'user'
                        span(class='text-left text-white') SIGCAPDAM !{cookies.role_name}
                        
                div(class='px-6 h-[calc(54rem)]')
                    #map(class='h-full flex justify-center items-center rounded-2xl border border-dashed border-gray-300/40 dark:border-gray-700')
                    div(class='absolute top-1/2 right-1 transform translate-y-[-50%] px-6 py-4')
                        input#search(type='text' class='w-full h-full text-gray-600 dark:text-gray-300 bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none hover:bg-gray-200 dark:hover:bg-gray-700 text-center' placeholder='Buscar capas')
                        div#jstree(class='flex w-full h-full bg-white py-2')

                        include ./includes/footer.jade
                        script.

                            // Script para la barra de buscar del jstree //
                            $(document).ready(function(){
                                $("#search").on("keyup", function() {
                                    var value = $(this).val().toLowerCase();
                                    $("#jstree li").filter(function() {
                                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                                    });
                                });
                            })

                            document.addEventListener('DOMContentLoaded', function () {
                                // Coordenadas que centrarán el mapa al cargar la página
                                var centerCoordinates = [-104.301939092764954, 19.066318856363417];
                                var token = sessionStorage.getItem('token');

                                // Crear el mapa
                                var map = new ol.Map({
                                    target: 'map',
                                    layers: [
                                        new ol.layer.Tile({
                                            source: new ol.source.OSM() // OpenStreetMap
                                        })
                                    ],
                                    view: new ol.View({
                                        center: ol.proj.fromLonLat(centerCoordinates),
                                        zoom: 14
                                    })
                                });

                                // Ver las coordenadas del mouse en el mapa
                                var mousePositionControl = new ol.control.MousePosition({
                                    coordinateFormat: ol.coordinate.createStringXY(4),
                                    projection: 'EPSG:4326',
                                    className: 'custom-mouse-position',
                                    target: document.getElementById('mouse-position'),
                                    undefinedHTML: '&nbsp;'
                                });

                                map.addControl(mousePositionControl);

                                    // Obtener todos los layers
                                    fetch('/api/v1/layers/all', {
                                        method: 'GET',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'Authorization': '!{cookies.token}',
                                        },
                                    })
                                    .then((response) => response.json())
                                        .then((layers) => {
                                            let categories = {};

                                            // Process the layers
                                            layers.forEach(function (layer) {
                                                // Ensure the URL is correct
                                                var geoJsonUrl = 'assets/layers/capas_js/' + layer.categoryData.name + '/' + layer.archive;

                                                var layerSource = new ol.source.Vector({
                                                    url: geoJsonUrl,
                                                    format: new ol.format.GeoJSON()
                                                });

                                                // Create a new iconStyle for each layer
                                                var iconStyleForLayer = new ol.style.Style({
                                                    image: new ol.style.Icon({
                                                        anchor: [0.5, 0.5],
                                                        anchorXUnits: 'fraction',
                                                        anchorYUnits: 'fraction',
                                                        src: 'assets/layer_icons/' + layer.categoryData.name + '/' + layer.name + '.png',
                                                        scale: 0.6
                                                    }),
                                                });

                                                var vectorLayer = new ol.layer.Vector({
                                                    source: layerSource,
                                                    visible: false, // Start with the layer not 
                                                    style: function(feature, resolution) {
                                                        // Revisar si el layer es de tipo punto, línea o polígono
                                                        if(feature.getGeometry().getType() === 'Point' || feature.getGeometry().getType() === 'MultiPoint') {
                                                            return iconStyleForLayer;
                                                        } else if(feature.getGeometry().getType() === 'LineString' || feature.getGeometry().getType() === 'MultiLineString') {
                                                            var color = feature.get('COLOR_1');
                                                            return new ol.style.Style({
                                                                // Establecer el valor de color obtenido en el stroke
                                                                stroke: new ol.style.Stroke({
                                                                    color: 'rgba('+ color +', 0.5)',
                                                                    width: 4
                                                                })
                                                            });
                                                        } else if(feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'MultiPolygon' ) {
                                                            var color = feature.get('COLOR_1');
                                                            var color2 = feature.get('COLOR_2');
                                                            return new ol.style.Style({
                                                                stroke: new ol.style.Stroke({
                                                                    color: 'rgba('+ color +', 0.5)',
                                                                    width: 20,
                                                                    scale: 2
                                                                }),
                                                                fill: new ol.style.Fill({
                                                                    color: 'rgba('+ color2 +', 0.5)',
                                                                    width: 20,
                                                                    scale: 2
                                                                })
                                                            });
                                                        }
                                                    }
                                                });

                                                if(layer.name) {
                                                    vectorLayer.set('name', layer.name);
                                                } else {
                                                    vectorLayer.set('name', 'No name');
                                                }

                                                var iconStyle = new ol.style.Style({
                                                    image: new ol.style.Icon({
                                                        anchor: [0.5, 0.5],
                                                        anchorXUnits: 'fraction',
                                                        anchorYUnits: 'fraction',
                                                        src: 'assets/layer_icons/' + layer.categoryData.name + '/' + layer.name + '.png',
                                                        scale: 0.1
                                                    }),
                                                });

                                                if(!categories[layer.categoryData.name]) {
                                                    categories[layer.categoryData.name] = [];
                                                }

                                                // Add the layer to the category on jsTree
                                                categories[layer.categoryData.name].push({
                                                    id: layer.name,
                                                    text: '<img src="assets/layer_icons/' + layer.categoryData.name  + '/' + layer.name + '.png" class="inline-block w-4 h-4"> ' + layer.name,
                                                    state: {
                                                        opened: true,
                                                        selected: false
                                                    }
                                                });

                                                map.addLayer(vectorLayer);

                                            });

                                            // Initialize JSTree
                                            let jstreeData = Object.keys(categories).map(category => {
                                                return {
                                                    text: category,
                                                    state: {
                                                        opened: true // Open categories by default
                                                    },
                                                    children: categories[category]
                                                };
                                            });

                                            $("#jstree").jstree({
                                                "core": {
                                                    "data": jstreeData,
                                                    "themes": {
                                                        "theme": "default",
                                                        "icons": false,
                                                        "variant": "small",
                                                        "stripes": false,
                                                        "dots": false
                                                    },
                                                },
                                                "checkbox": {
                                                    "keep_selected_style": false
                                                },
                                                "plugins": ["checkbox", "themes", "search"],
                                                "search": {
                                                    "case_sensitive": false,
                                                    "show_only_matches": true
                                                }
                                            }).on('ready.jstree', function () {
                                                // Close all nodes once the tree is loaded
                                                var to = false;
                                                $('#jstree').jstree('close_all');
                                            }).on('changed.jstree', function (e, data) {
                                                // Get all selected nodes
                                                var selectedNodes = $('#jstree').jstree(true).get_selected();

                                                // Get all layers
                                                var layers = map.getLayers().getArray();
                                                var layersToProcess = layers.slice(1);

                                                // Loop through all layers
                                                layersToProcess.forEach(function (layer) {
                                                    // Get the layer name
                                                    var layerName = layer.get('name');

                                                    // Determine if the current layer's name is in the array of selected nodes
                                                    var isSelected = selectedNodes.indexOf(layerName) !== -1;

                                                    // Set layer visibility based on whether it's selected
                                                    layer.setVisible(isSelected);
                                                });
                                            });
                                        })
                                        .catch((error) => {
                                            console.error('Error fetching layers:', error);
                                        });

                                    // Logout button click handler
                                    $('#logoutButton').on('click', function () {
                                        // Fetch to the API logout endpoint
                                        fetch('/api/v1/auth/logout', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                        })
                                        .then(response => {
                                            if (response.ok) {
                                                // Display SweetAlert for successful logout
                                                return Swal.fire({
                                                    title: "Logout Successful",
                                                    text: "You have been logged out successfully.",
                                                    icon: "success",
                                                });
                                            } else {
                                                // If the response is not OK, reject the promise
                                                throw new Error('Logout failed.');
                                            }
                                        })
                                        .then(() => {
                                            // Redirect to the home page after handling the response
                                            window.location.href = '/';
                                        })
                                        .catch(error => {
                                            // Handle errors, including failed logout
                                            console.error('Error during logout:', error);
                                            Swal.fire("Logout Failed", "There was an error during logout.", "error");
                                        });
                                    });
                                });