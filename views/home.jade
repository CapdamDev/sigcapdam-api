doctype html
html
    head
        title SIGCAPDAM - Capas
        include ./includes/head.jade
    body(class='bg-white dark:bg-gray-900')
        aside(class='compact-nav fixed group overflow-hidden left-0 top-0 z-10 h-screen w-[calc(3.73rem)] border-r border-gray-300/40 bg-white dark:bg-gray-900 dark:border-gray-700 hover:w-56 hover:shadow-2xl')
            div(class='h-full flex flex-col justify-between')
                div
                    div(class='h-16 border-b border-gray-300/40 dark:border-gray-700 flex items-center justify-center')
                        a(href='#' class='block w-max px-2.5')
                            img(class='w-auto h-10 rounded-full' src='./assets/img/profile.png' alt='')
                    div(class='mt-6')
                        ul(class='px-1 -ml-px space-y-4 font-medium tracking-wide')
                            li(class='w-max space-y-4 group-hover:w-full')
                                a(href='#' class='block py-3 w-[52px] rounded-full bg-sky-500 group-hover:w-full')
                                    div(class='w-max flex items-center px-3 gap-4')
                                        svg(class='h-7 w-7' xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-map-fill" viewBox="0 0 16 16")
                                            path(fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.598-.49L10.5.99 5.598.01a.5.5 0 0 0-.196 0l-5 1A.5.5 0 0 0 0 1.5v14a.5.5 0 0 0 .598.49l4.902-.98 4.902.98a.502.502 0 0 0 .196 0l5-1A.5.5 0 0 0 16 14.5V.5zM5 14.09V1.11l.5-.1.5.1v12.98l-.402-.08a.498.498 0 0 0-.196 0L5 14.09zm5 .8V1.91l.402.08a.5.5 0 0 0 .196 0L11 1.91v12.98l-.5.1-.5-.1z")
                                        span(class='text-white') SIGCAPDAM
                            li(class='w-max')
                                a(href='/layers_dashboard')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-pin-map-fill" viewBox="0 0 16 16")
                                            path(fill-rule="evenodd" d="M3.1 11.2a.5.5 0 0 1 .4-.2H6a.5.5 0 0 1 0 1H3.75L1.5 15h13l-2.25-3H10a.5.5 0 0 1 0-1h2.5a.5.5 0 0 1 .4.2l3 4a.5.5 0 0 1-.4.8H.5a.5.5 0 0 1-.4-.8z")
                                            path(fill-rule="evenodd" d="M4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999z")
                                        span(class='text-gray-600 dark:text-gray-300') Gest. de capas
                            li(class='w-max')
                                a(href='#')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-people-fill" viewBox="0 0 16 16")
                                            path(d="M7 14s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1zm4-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-5.784 6A2.238 2.238 0 0 1 5 13c0-1.355.68-2.75 1.936-3.72A6.325 6.325 0 0 0 5 9c-4 0-5 3-5 4s1 1 1 1zM4.5 8a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5")
                                        span(class='text-gray-600 dark:text-gray-300') Gest. usuarios
                            li(class='w-max')
                                a(href='#')
                                    div(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg')
                                            path(class='fill-gray-500 dark:fill-gray-100' fillrule='evenodd' cliprule='evenodd' d='M2 5a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM2 10a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM3 15a1 1 0 100 2h14a1 1 0 100-2H3z')
                                        span(class='text-gray-600 dark:text-gray-300') Categories
                            li(class='w-max')
                                a(href='#')
                                    div#logoutButton(class='flex items-center gap-4 px-4 py-3')
                                        svg(class='h-7 w-7 fill-gray-500 dark:fill-gray-100 bi bi-box-arrow-in-left' xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16")
                                            path(fill-rule="evenodd" d="M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0z")
                                            path(fill-rule="evenodd" d="M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z")
                                        span(class='text-gray-600 dark:text-gray-300') Logout
                div(class='py-4 px-2 border-t border-gray-300/40 dark:border-gray-700')
                    a(href='#')
                        div(class='w-max flex items-center gap-4')
                            img(class='w-10 h-10 rounded-full' src='https://avatars.githubusercontent.com/u/31113941?v=4' alt='')
                            div
                                h6#nombre(class='text-gray-600 font-medium dark:text-gray-200') Nombre
                                span#userType(class='block -mt-0.5 text-xs text-gray-500 dark:text-white') Role
        main.ml-auto(class='w-[calc(100%-3.73rem)]')
            div(class='2xl:w-auto mx-auto space-y-6')
                div(class='h-16 items-center border border-gray-300/40 dark:border-gray-700 flex justify-between px-6 lg:px-12')
                    //- Coordenadas del mouse
                    div(class='flex items-center')
                        span(class='text-gray-500 dark:text-gray-200') Coordenadas del mouse:
                        span#mouse-position.text-gray-500(class='dark:text-gray-200 ml-2')
                    span(class='text-left text-white') SIGCAPDAM

                div(class='px-6 h-[calc(51rem)]')
                    #map(class='h-full flex justify-center items-center rounded-2xl border border-dashed border-gray-300/40 dark:border-gray-700')

                    //- Make a div to display the JS Tree and search bar, positioned at right, in the middle of the screen, with a button to toggle it open and closed
                                        
                    div(class='absolute top-1/2 right-1 transform translate-y-[-50%] px-6 py-4')
                        input#search(type='text' class='w-full h-full text-gray-600 dark:text-gray-300 bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none hover:bg-gray-200 dark:hover:bg-gray-700 text-center' placeholder='Buscar capas')
                        div#jstree(class='flex w-full h-full bg-white py-2')

                        include ./includes/footer.jade
                        script.

                            // Script para la barra de buscar del jstree //
                            $(document).ready(function(){
                                $("#search").on("keyup", function() {
                                    var value = $(this).val().toLowerCase();
                                    $("#jstree li").filter(function() {
                                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                                    });
                                });
                            })

                            document.addEventListener('DOMContentLoaded', function () {
                                    // Coordenadas que centrarán el mapa al cargar la página
                                var centerCoordinates = [-104.301939092764954, 19.066318856363417];
                                var token = sessionStorage.getItem('token');

                                // Crear el mapa
                                var map = new ol.Map({
                                    target: 'map',
                                    layers: [
                                        new ol.layer.Tile({
                                            source: new ol.source.OSM() // OpenStreetMap
                                        })
                                    ],
                                    view: new ol.View({
                                        center: ol.proj.fromLonLat(centerCoordinates),
                                        zoom: 14
                                    })
                                });

                                // Ver las coordenadas del mouse en el mapa
                                var mousePositionControl = new ol.control.MousePosition({
                                    coordinateFormat: ol.coordinate.createStringXY(4),
                                    projection: 'EPSG:4326',
                                    className: 'custom-mouse-position',
                                    target: document.getElementById('mouse-position'),
                                    undefinedHTML: '&nbsp;'
                                });

                                map.addControl(mousePositionControl);

                                if (!token) {
                                    window.location.href = '/login';
                                } else {

                                    var iconStyle = new ol.style.Style({
                                        image: new ol.style.Icon({
                                            anchor: [0.5, 0.5],
                                            anchorXUnits: 'fraction',
                                            anchorYUnits: 'fraction',
                                            src: 'assets/layer_icons/CONTRATOS.png',
                                            scale: 0.1
                                        }),
                                    });

                                    // Obtener todos los layers
                                    fetch('/api/v1/layers/all', {
                                        method: 'GET',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'Authorization': token,
                                        },
                                    })
                                    .then((response) => response.json())
                                        .then((layers) => {
                                            let categories = {};

                                            // Process the layers
                                            layers.forEach(function (layer) {
                                                // Ensure the URL is correct
                                                var geoJsonUrl = 'assets/layers/capas_js/' + layer.category + '/' + layer.archive;

                                                // Create a new iconStyle for each layer
                                                var iconStyleForLayer = new ol.style.Style({
                                                    image: new ol.style.Icon({
                                                        anchor: [0.5, 0.5],
                                                        anchorXUnits: 'fraction',
                                                        anchorYUnits: 'fraction',
                                                        src: 'assets/layer_icons/' + layer.category + '/' + layer.name + '.png',
                                                        scale: 0.6
                                                    }),
                                                });

                                                var layerSource = new ol.source.Vector({
                                                    url: geoJsonUrl,
                                                    format: new ol.format.GeoJSON()
                                                });

                                                var vectorLayer = new ol.layer.Vector({
                                                    source: layerSource,
                                                    visible: false, // Start with the layer not 
                                                    style: function(feature, resolution) {
                                                        // Revisar si el layer es de tipo punto, línea o polígono
                                                        if(feature.getGeometry().getType() === 'Point' || feature.getGeometry().getType() === 'MultiPoint') {
                                                            return iconStyleForLayer;
                                                        } else if(feature.getGeometry().getType() === 'LineString' || feature.getGeometry().getType() === 'MultiLineString') {
                                                            var color = feature.get('COLOR_1');
                                                            return new ol.style.Style({
                                                                // Establecer el valor de color obtenido en el stroke
                                                                stroke: new ol.style.Stroke({
                                                                    color: 'rgba('+ color +', 0.5)',
                                                                    width: 2
                                                                })
                                                            });
                                                        } else if(feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'MultiPolygon' ) {
                                                            var color = feature.get('COLOR_1');
                                                            var color2 = feature.get('COLOR_2');
                                                            return new ol.style.Style({
                                                                stroke: new ol.style.Stroke({
                                                                    color: 'rgba('+ color +', 0.5)',
                                                                    width: 2
                                                                }),
                                                                fill: new ol.style.Fill({
                                                                    color: 'rgba('+ color2 +', 0.5)'
                                                                })
                                                            });
                                                        }
                                                    }
                                                });

                                                if(layer.name) {
                                                    vectorLayer.set('name', layer.name);
                                                } else {
                                                    vectorLayer.set('name', 'No name');
                                                }

                                                var iconStyle = new ol.style.Style({
                                                    image: new ol.style.Icon({
                                                        anchor: [0.5, 0.5],
                                                        anchorXUnits: 'fraction',
                                                        anchorYUnits: 'fraction',
                                                        src: 'assets/layer_icons/' + layer.category + '/' + layer.name + '.png',
                                                        scale: 0.1
                                                    }),
                                                });

                                                //- layerSource.once('change', function (e) {
                                                //-     if (layerSource.getState() === 'ready') {
                                                //-         var extent = layerSource.getExtent();
                                                //-         map.getView().fit(extent);
                                                //-     }
                                                //- });

                                                // Get features from the layer (PENDIENTE)
                                                var features = layerSource.getFeatures();
                                                console.log(features);

                                                if(!categories[layer.category]) {
                                                    categories[layer.category] = [];
                                                }

                                                // Add the layer to the category on jsTree
                                                categories[layer.category].push({
                                                    id: layer.name,
                                                    text: ' <img src="assets/layer_icons/' + layer.category  + '/' + layer.name + '.png" class="inline-block w-4 h-4"> ' + layer.name,
                                                    state: {
                                                        opened: true,
                                                        selected: false
                                                    }
                                                });
                                                map.addLayer(vectorLayer);

                                            });

                                            // Initialize JSTree
                                            let jstreeData = Object.keys(categories).map(category => {
                                                return {
                                                    text: category,
                                                    state: {
                                                        opened: true // Open categories by default
                                                    },
                                                    children: categories[category]
                                                };
                                            });

                                            $("#jstree").jstree({
                                                "core": {
                                                    "data": jstreeData,
                                                    "themes": {
                                                        "icons": false,
                                                        "variant": "small",
                                                        "stripes": false,
                                                        "dots": false
                                                    },
                                                },
                                                "checkbox": {
                                                    "keep_selected_style": false
                                                },
                                                "plugins": ["checkbox", "themes", "search"],
                                                "search": {
                                                    "case_sensitive": false,
                                                    "show_only_matches": true
                                                }
                                            }).on('ready.jstree', function () {
                                                // Close all nodes once the tree is loaded
                                                var to = false;
                                                $('#jstree').jstree('close_all');
                                            }).on('changed.jstree', function (e, data) {
                                                // Get all selected nodes
                                                var selectedNodes = $('#jstree').jstree(true).get_selected();

                                                // Get all layers
                                                var layers = map.getLayers().getArray();
                                                var layersToProcess = layers.slice(1);

                                                // Loop through all layers
                                                layersToProcess.forEach(function (layer) {
                                                    // Get the layer name
                                                    var layerName = layer.get('name');

                                                    // Determine if the current layer's name is in the array of selected nodes
                                                    var isSelected = selectedNodes.indexOf(layerName) !== -1;

                                                    // Set layer visibility based on whether it's selected
                                                    layer.setVisible(isSelected);
                                                });
                                            });
                                        })
                                        .catch((error) => {
                                            console.error('Error fetching layers:', error);
                                        });
                                }

                                    // Logout
                                    $('#logoutButton').on('click', function () {
                                        sessionStorage.removeItem('token');
                                        sessionStorage.removeItem('role_id');
                                        sessionStorage.removeItem('role_name');
                                        window.location.href = '/login';
                                    });
                            });