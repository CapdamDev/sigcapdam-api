doctype html
html(lang='es')
    head
        block content
            title SIGCAPDAM - Capas !{token}
        include ./includes/head.jade
    body(class='bg-white dark:bg-gray-900')
        include ./includes/sidebar.jade
        block content
        main.ml-auto(class='w-[calc(100%-3.73rem)]')
            div(class='2xl:w-auto mx-auto space-y-6')
                div(class='h-16 items-center border border-gray-300/40 dark:border-gray-700 flex justify-between px-6 lg:px-12')
                    //- Coordenadas del mouse
                    div(class='flex items-center')
                        span(class='text-gray-500 dark:text-gray-200') Coordenadas del mouse:
                        span#mouse-position.text-gray-500(class='dark:text-gray-200 ml-2')
                    //- if cookies.role_name === 'root'
                    //-     span(class='text-left text-white') Administrador
                    //- else if cookies.role_name === 'user'
                    //-     span(class='text-left text-white') SIGCAPDAM !{cookies.role_name}

                    
                div(class='px-6 h-[calc(55rem)]')
                    #map(class='h-full flex flex-row justify-center items-center border border-dashed border-gray-300/40 dark:border-gray-700')
                    
                div(class='absolute top-1/4 right-1 transform translate-y-[-50%] px-6 py-4')
                        button(class='w-8 h-8 text-white bg-gray-900 border-0 py-2 focus:outline-none hover:bg-gray-600 rounded text-xs' onclick='toggleRightPanel()')
                            i(class='fas fa-eye-slash' id='rightPanelIcon')

                    div(class='absolute top-1/2 right-1 transform translate-y-[-50%] px-6 py-4' id='right-panel')
                        div.flex.w-full.text-white.border-0.py-2.text-center.items-center(class='dark:text-white dark:bg-gray-800 focus:outline-none')
                            span.mx-auto BUSCAR PREDIO POR
                        div(class='w-auto h-auto dark:bg-white bg-gray-900 border-0 py-2 flex justify-center')

                            div(class="flex items-center me-4 ml-2")
                                input(id="inline-radio" type="radio" value="" name="inline-radio-group" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" onclick='showContainer("contenedor_clavecatastro");' checked)
                                label(for="inline-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-black") Clave Catastral
                            div(class="flex items-center me-4")
                                input(id="inline-2-radio" type="radio" value="" name="inline-radio-group" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" onclick='showContainer("contenedor_contrato");')
                                label(for="inline-2-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-black") Contrato de Agua
                        form(role='search')
                            div(class='flex justify-center items-center dark:bg-white bg-gray-900 border-0 py-2' id='contenedor_clavecatastro')
                                div(class='p-[0.2rem]')
                                    label(for='mun' class='block text-center text-white dark:text-black text-xs') Mun.:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='2' id='mun')
                                div(class='p-[0.2rem]')
                                    label(for='local' class='block text-center text-white dark:text-black text-xs') Local:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='2' id='local')
                                div(class='p-[0.2rem]')
                                    label(for='zona' class='block text-center text-white dark:text-black text-xs') Zona:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='2' id='zona')
                                div(class='p-[0.2rem]')
                                    label(for='manza.' class='block text-center text-white dark:text-black text-xs') Manza.:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='3' id='manza')
                                div(class='p-[0.2rem]')
                                    label(for='predio:' class='block text-center text-white dark:text-black text-xs') Predio:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='3' id='predio')
                                div(class='p-[0.2rem]')
                                    label(for='subpredio:' class='block text-center text-white dark:text-black text-xs') Subpred:
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1 text-xs pr-0 pl-0' style='width: 2rem;' maxlength='3' id='subpredio')


                            div(class='justify-center items-center dark:bg-white bg-gray-900 border-0 py-2 hidden' id='contenedor_contrato')
                                div(class='items-center justify-center text-center w-full border-0')
                                    input(type='text' class='text-center text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 mx-1' placeholder='No. Contrato' id='contratoAgua')
                            
                            //- Button to send the form and submit to search the claveCatastral or contrato 07 20 04 022 003 000
                            div(class='flex justify-center items-center dark:bg-white bg-gray-900 border-0 py-2')
                                button(class='w-60 h-8 text-white bg-gray-900 border-0 py-2 focus:outline-none hover:bg-gray-600 rounded text-xs' onclick='buscarDomicilio()') Buscar

                        input#search(type='text' class='w-full h-full text-gray-600 dark:text-white bg-white dark:bg-gray-800 border-0 py-2 focus:outline-none dark:hover:bg-gray-700 text-center' placeholder='Buscar capas')
                        div#jstree(style='max-height: 300px;' class='flex w-full bg-white py-2 overflow-y-auto')

                        include ./includes/footer.jade
                        script.

                            // Coordenadas que centrarán el mapa al cargar la página
                            var centerCoordinates = [-104.301939092764954, 19.066318856363417];
                            var token = sessionStorage.getItem('token');

                            // Crear el mapa
                            var map = new ol.Map({
                                target: 'map',
                                layers: [
                                    new ol.layer.Tile({
                                        source: new ol.source.OSM() // OpenStreetMap
                                    })
                                ],
                                view: new ol.View({
                                    center: ol.proj.fromLonLat(centerCoordinates),
                                    zoom: 14
                                })
                            });

                            // Ver las coordenadas del mouse en el mapa
                            var mousePositionControl = new ol.control.MousePosition({
                                coordinateFormat: ol.coordinate.createStringXY(4),
                                projection: 'EPSG:4326',
                                className: 'custom-mouse-position',
                                target: document.getElementById('mouse-position'),
                                undefinedHTML: '&nbsp;'
                            });

                            map.addControl(mousePositionControl);

                            // Script para buscar por clave catastral //
                            function buscarDomicilio() {
                                event.preventDefault();
                                var mun = document.getElementById("mun").value;
                                var local = document.getElementById("local").value;
                                var zona = document.getElementById("zona").value;
                                var manza = document.getElementById("manza").value;
                                var predio = document.getElementById("predio").value;
                                var subpredio = document.getElementById("subpredio").value;
                                var claveCatastral = mun + local + zona + manza + predio + subpredio;
                                console.log(claveCatastral);
                                var contratoAgua = document.getElementById("contratoAgua").value;
                                console.log(contratoAgua);

                                if (claveCatastral != "" && claveCatastral.length < 15) {
                                    // Make a sweet alert message
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: 'La clave catastral debe tener 15 dígitos',
                                    })
                                }

                                // Only when ClaveCatastral is available and has 15 digits, if not, don't do anything
                                else if (claveCatastral != "" && claveCatastral >= 15) {

                                    // Clear existing vector layers and popups
                                    map.getLayers().forEach(layer => {
                                        if (layer instanceof ol.layer.Vector) {
                                            map.removeLayer(layer);
                                        }
                                    });
                                    map.getOverlays().clear();

                                    fetch(`https://corsproxy.io/?https://digecat.manzanillo.gob.mx/index.php/Exteriror/mapa_clave_catastro_simple_detalles?do1=${claveCatastral}`)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Network response was not ok: ${response.statusText}`);
                                        }
                                        return response.json()
                                        .then(data2 => {
                                            if (data2.length === 0) {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Sin datos',
                                                    text: 'No se encontró información sobre la clave catastral proporcionada',
                                                });
                                            }
                                            return data2;
                                        });
                                    })
                                    .then(data1 => {
                                        var poligono_testo = data1[0].poligono[0].poligono_testo;
                                        console.log(data1);
                                        console.log(poligono_testo);
                                        if(poligono_testo == null || poligono_testo == "" || poligono_testo == undefined){
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Oops...',
                                                text: 'No se encontró la clave catastral',
                                            })
                                        }

                                        // Extract the coordinates from poligono_testo
                                        const polygonStr = poligono_testo;
                                        const coordinates = polygonStr.match(/-?\d+\.\d+/g);
                                        const parsedCoordinates = coordinates.map(coord => parseFloat(coord));

                                        console.log('Solo coordenadas: ', parsedCoordinates);

                                        // Create an array of coordinate pairs from the flat array
                                        const coordinatePairs = [];
                                        for (let i = 0; i < parsedCoordinates.length; i += 2) {
                                            coordinatePairs.push([parsedCoordinates[i], parsedCoordinates[i + 1]]);
                                        }

                                        console.log('Coordenadas por pares:', coordinatePairs);

                                        // Transform coordinates from EPSG:4326 to the map's projection
                                        const transformedCoordinates = coordinatePairs.map(coord => ol.proj.transform(coord, 'EPSG:4326', map.getView().getProjection()));

                                        // Show the polygon on the map
                                        var polygon = new ol.geom.Polygon([transformedCoordinates]);
                                        var feature = new ol.Feature(polygon);
                                        var vectorSource = new ol.source.Vector({
                                            features: [feature]
                                        });
                                        var vectorLayer = new ol.layer.Vector({
                                            source: vectorSource,
                                            style: new ol.style.Style({
                                                stroke: new ol.style.Stroke({
                                                    color: 'rgba(255, 0, 0, 0.5)',
                                                    width: 4
                                                }),
                                                fill: new ol.style.Fill({
                                                    color: 'rgba(255, 0, 0, 0.2)'
                                                })
                                            })
                                        });
                                        map.addLayer(vectorLayer);

                                        // Go to the transformed coordinates with a specific zoom level
                                        map.getView().fit(polygon, { size: map.getSize(), padding: [50, 50, 50, 50], maxZoom: 18 });

                                        // https://pagos.capdam.gob.mx/connections/api.php?CveCat=072004022003000
                                        // Get the data from the API using the data[0].clavecat
                                        fetch(`https://pagos.capdam.gob.mx/connections/api.php?CveCat=${data1[0].clavecat}`)
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error(`Network response was not ok: ${response.statusText}`);
                                            }
                                            return response.json();
                                        })
                                        // Save the response from pagos API in data2
                                        .then(data2 => {
                                            console.log(data2);

                                            // Show the popup
                                            var popup = new ol.Overlay.Popup();
                                            map.addOverlay(popup);
                                            popup.show(transformedCoordinates[0], 
                                            '<div class="text-center">\
                                                <h1 class="text-2xl font-bold">Clave Catastral: </h1>\
                                                <p class="text-sm">Colonia: ' + data1[0].colonia + '</p>\
                                                <p class="text-sm">Localidad: ' + data1[0].localidad + '</p>\
                                                <p class="text-sm">Zona: ' + data1[0].zona + '</p>\
                                                <p class="text-sm">Titular: ' + data1[0].titlenombre + '</p>\
                                                <p class="text-sm">Clave cat: ' + data1[0].clavecat2 + '</p>\
                                                <p class="text-sm">Uso: ' + data1[0].uso_propiedad + '</p>\
                                                <p class="text-sm">Contrato: ' + data2.anual[0].contrato + '</p>\
                                            </div>');
                                        })

                                        // Clean variables
                                        mun, local, zona, manza, predio, subpredio = "";
                                        contratoAgua = "";

                                    })
                                    .catch(error => {
                                        console.error('Error during fetch:', error);
                                    });
                                }

                                else if(contratoAgua != ""){
                                    
                                    // Clear existing vector layers and popups
                                    map.getLayers().forEach(layer => {
                                        if (layer instanceof ol.layer.Vector) {
                                            map.removeLayer(layer);
                                        }
                                    });
                                    map.getOverlays().clear();

                                    fetch(`https://pagos.capdam.gob.mx/connections/api.php?Contrato=${contratoAgua}`)

                                    // Now we make an inverse search, we get the data from the API using the contratoAgua
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Network response was not ok: ${response.statusText}`);
                                        }
                                        return response.json();
                                    })
                                    .then(data1 => {
                                        console.log(data1);
                                        console.log(data1.bimestral[0].CveCat);
                                        if(data1.bimestral[0].CveCat == null || data1.bimestral[0].CveCat == "" || data1.bimestral[0].CveCat == undefined || data1.bimestral[0].CveCat == "000000000000000"){
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Oops...',
                                                text: 'Contrato sin clave catastral',
                                            })
                                        }

                                        // Now we get the data from the API using the data1.bimestral[0].CveCat
                                        fetch(`https://corsproxy.io/?https://digecat.manzanillo.gob.mx/index.php/Exteriror/mapa_clave_catastro_simple_detalles?do1=${data1.bimestral[0].CveCat}`)
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error(`Network response was not ok: ${response.statusText}`);
                                            }
                                            return response.json();
                                        })
                                        .then(data2 => {
                                            console.log(data2);
                                            console.log(data2[0].poligono[0].poligono_testo);

                                            // Extract the coordinates from data2[0].poligono[0].poligono_testo
                                            const polygonStr = data2[0].poligono[0].poligono_testo;
                                            const coordinates = polygonStr.match(/-?\d+\.\d+/g);
                                            const parsedCoordinates = coordinates.map(coord => parseFloat(coord));

                                            console.log('Solo coordenadas: ', parsedCoordinates);

                                            // Create an array of coordinate pairs from the flat array
                                            const coordinatePairs = [];
                                            for (let i = 0; i < parsedCoordinates.length; i += 2) {
                                                coordinatePairs.push([parsedCoordinates[i], parsedCoordinates[i + 1]]);
                                            }

                                            console.log('Coordenadas por pares:', coordinatePairs);

                                            // Transform coordinates from EPSG:4326 to the map's projection
                                            const transformedCoordinates = coordinatePairs.map(coord => ol.proj.transform(coord, 'EPSG:4326', map.getView().getProjection()));

                                            // Show the polygon on the map
                                            var polygon = new ol.geom.Polygon([transformedCoordinates]);
                                            var feature = new ol.Feature(polygon);
                                            var vectorSource = new ol.source.Vector({
                                                features: [feature]
                                            });
                                            var vectorLayer = new ol.layer.Vector({
                                                source: vectorSource,
                                                style: new ol.style.Style({
                                                    stroke: new ol.style.Stroke({
                                                        color: 'rgba(255, 0, 0, 0.5)',
                                                        width: 4
                                                    }),
                                                    fill: new ol.style.Fill({
                                                        color: 'rgba(255, 0, 0, 0.2)'
                                                    })
                                                })
                                            });
                                            map.addLayer(vectorLayer);

                                            // Go to the transformed coordinates with a specific zoom level
                                            map.getView().fit(polygon, { size: map.getSize(), padding: [50, 50, 50, 50], maxZoom: 18 });

                                            // Show the popup
                                            var popup = new ol.Overlay.Popup();
                                            map.addOverlay(popup);
                                            popup.show(transformedCoordinates[0],
                                            '<div class="text-center">\
                                                <h1 class="text-2xl font-bold">Clave Catastral: </h1>\
                                                <p class="text-sm">Colonia: ' + data2[0].colonia + '</p>\
                                                <p class="text-sm">Localidad: ' + data2[0].localidad + '</p>\
                                                <p class="text-sm">Zona: ' + data2[0].zona + '</p>\
                                                <p class="text-sm">Titular: ' + data2[0].titlenombre + '</p>\
                                                <p class="text-sm">Clave cat: ' + data2[0].clavecat2 + '</p>\
                                                <p class="text-sm">Uso: ' + data2[0].uso_propiedad + '</p>\
                                                <p class="text-sm">Contrato: ' + data1.bimestral[0].numcontrato + '</p>\
                                            </div>');

                                            // And clean variables
                                            mun, local, zona, manza, predio, subpredio = "";
                                            contratoAgua = "";

                                        })
                                    })
                                    .catch(error => {
                                        console.error('Error during fetch:', error);
                                    });
                                }
                            }

                            // Script para la barra de buscar del jstree //
                            $(document).ready(function(){
                                $("#search").on("keyup", function() {
                                    var value = $(this).val().toLowerCase();
                                    $("#jstree li").filter(function() {
                                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                                    });
                                });
                            })

                            document.addEventListener('DOMContentLoaded', function () {

                                // Obtener todos los layers
                                fetch('/api/v1/layers/all', {
                                    method: 'GET',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Authorization': '!{cookies.token}',
                                    },
                                })
                                .then((response) => {
                                    if (response.status === 401) {
                                        Swal.fire({
                                            title: 'Error',
                                            text: 'Vuelve a iniciar sesión',
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            fetch('api/v1/auth/logout', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json'
                                                },
                                            })
                                            .then(response => {
                                                if (response.ok) {
                                                    window.location.href = '/';
                                                } else {
                                                    throw new Error('Logout failed.');
                                                }
                                            })
                                        });
                                    } else {
                                        return response.json();
                                    }
                                })
                                .then((layers) => {
                                    let categories = {};

                                    // Process the layers
                                        layers.forEach(function (layer) {
                                            // Ensure the URL is correct
                                            var geoJsonUrl = 'assets/layers/' + layer.archive;

                                            var layerSource = new ol.source.Vector({
                                                url: geoJsonUrl,
                                                format: new ol.format.GeoJSON()
                                            });

                                            // Create a new iconStyle for each layer
                                            var iconStyleForLayer = new ol.style.Style({
                                                image: new ol.style.Icon({
                                                    anchor: [0.5, 0.5],
                                                    anchorXUnits: 'fraction',
                                                    anchorYUnits: 'fraction',
                                                    src: 'assets/layers/' + layer.icono,
                                                    scale: 0.6
                                                }),
                                            });

                                            var vectorLayer = new ol.layer.Vector({
                                                source: layerSource,
                                                visible: false, // Start with the layer not 
                                                style: function(feature, resolution) {
                                                    // Revisar si el layer es de tipo punto, línea o polígono
                                                    if(feature.getGeometry().getType() === 'Point' || feature.getGeometry().getType() === 'MultiPoint') {
                                                        return iconStyleForLayer;
                                                    } else if(feature.getGeometry().getType() === 'LineString' || feature.getGeometry().getType() === 'MultiLineString') {
                                                        var color = feature.get('COLOR_1');
                                                        return new ol.style.Style({
                                                            // Establecer el valor de color obtenido en el stroke
                                                            stroke: new ol.style.Stroke({
                                                                color: 'rgba('+ color +', 0.5)',
                                                                width: 4
                                                            })
                                                        });
                                                    } else if(feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'MultiPolygon' ) {
                                                        var color = feature.get('COLOR_1');
                                                        var color2 = feature.get('COLOR_2');
                                                        return new ol.style.Style({
                                                            stroke: new ol.style.Stroke({
                                                                color: 'rgba('+ color +', 0.5)',
                                                                width: 4,
                                                                scale: 2
                                                            }),
                                                            fill: new ol.style.Fill({
                                                                color: 'rgba('+ color +', 0.2)',
                                                                width: 4,
                                                                scale: 2
                                                            })
                                                        });
                                                    }
                                                }
                                            });

                                            if(layer.name) {
                                                vectorLayer.set('name', layer.name);
                                            } else {
                                                vectorLayer.set('name', 'No name');
                                            }

                                            var iconStyle = new ol.style.Style({
                                                image: new ol.style.Icon({
                                                    anchor: [0.5, 0.5],
                                                    anchorXUnits: 'fraction',
                                                    anchorYUnits: 'fraction',
                                                    src: 'assets/layers/' + layer.icono,
                                                    scale: 0.1
                                                }),
                                            });

                                            if(!categories[layer.categoryData.name]) {
                                                categories[layer.categoryData.name] = [];
                                            }

                                            // Add the layer to the category on jsTree
                                            categories[layer.categoryData.name].push({
                                                id: layer.name,
                                                text: '<img src="assets/layers/' + layer.icono + '" class="inline-block w-4 h-4"> ' + layer.name,
                                                state: {
                                                    opened: true,
                                                    selected: false
                                                }
                                            });

                                            map.addLayer(vectorLayer);

                                        });

                                        // Initialize JSTree
                                        let jstreeData = Object.keys(categories).map(category => {
                                            return {
                                                text: category,
                                                state: {
                                                    opened: true // Open categories by default
                                                },
                                                children: categories[category]
                                            };
                                        });

                                        $("#jstree").jstree({
                                            "core": {
                                                "data": jstreeData,
                                                "themes": {
                                                    "theme": "default",
                                                    "icons": false,
                                                    "variant": "small",
                                                    "stripes": false,
                                                    "dots": false
                                                },
                                            },
                                            "checkbox": {
                                                "keep_selected_style": false
                                            },
                                            "plugins": ["checkbox", "themes", "search"],
                                            "search": {
                                                "case_sensitive": false,
                                                "show_only_matches": true
                                            }
                                        }).on('ready.jstree', function () {
                                            // Close all nodes once the tree is loaded
                                            var to = false;
                                            $('#jstree').jstree('close_all');
                                        }).on('changed.jstree', function (e, data) {
                                            // Get all selected nodes
                                            var selectedNodes = $('#jstree').jstree(true).get_selected();

                                            // Get all layers
                                            var layers = map.getLayers().getArray();
                                            var layersToProcess = layers.slice(1);

                                            // Loop through all layers
                                            layersToProcess.forEach(function (layer) {
                                                // Get the layer name
                                                var layerName = layer.get('name');

                                                // Determine if the current layer's name is in the array of selected nodes
                                                var isSelected = selectedNodes.indexOf(layerName) !== -1;

                                                // Set layer visibility based on whether it's selected
                                                layer.setVisible(isSelected);
                                            });
                                        });
                                    })
                                    .catch((error) => {
                                        console.error('Error fetching layers:', error);
                                    });
                                });

                            function showContainer(containerId) {
                                var contenedorClaveCatastro = document.getElementById("contenedor_clavecatastro");
                                var contenedorContrato = document.getElementById("contenedor_contrato");

                                if (containerId === "contenedor_clavecatastro") {
                                    contenedorClaveCatastro.classList.remove("hidden");
                                    contenedorContrato.classList.add("hidden");
                                    // Clear the input
                                    document.getElementById("contratoAgua").value = "";
                                } 
                                else if (containerId === "contenedor_contrato") {
                                    contenedorClaveCatastro.classList.add("hidden");
                                    contenedorContrato.classList.remove("hidden");
                                    // Clear the input
                                    document.getElementById("mun").value = "";
                                    document.getElementById("local").value = "";
                                    document.getElementById("zona").value = "";
                                    document.getElementById("manza").value = "";
                                    document.getElementById("predio").value = "";
                                    document.getElementById("subpredio").value = "";
                                }
                            }
                                
                            function toggleRightPanel() {
                                var rightPanel = document.getElementById('right-panel');
                                rightPanel.classList.toggle('hidden');

                                var rightPanelIcon = document.getElementById('rightPanelIcon');
                                rightPanelIcon.classList.toggle('fa-eye-slash');
                                rightPanelIcon.classList.toggle('fa-eye');
                            }
